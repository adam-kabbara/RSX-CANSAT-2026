
project_files.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d10  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f28  08005f28  00007014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f28  08005f28  00006f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f30  08005f30  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f34  08005f34  00006f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005f38  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000014  08005f4c  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005f4c  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8d7  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e3  00000000  00000000  0002491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a78  00000000  00000000  00027e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014bd  00000000  00000000  00029878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ce2  00000000  00000000  0002ad35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e703  00000000  00000000  0004ca17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1404  00000000  00000000  0006b11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007338  00000000  00000000  0014c564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  0015389c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005ed0 	.word	0x08005ed0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08005ed0 	.word	0x08005ed0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fdc6 	bl	80010d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f82e 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 fa0e 	bl	8000970 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000554:	f000 f876 	bl	8000644 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000558:	f000 f8ec 	bl	8000734 <MX_I2C1_Init>
  MX_SPI1_Init();
 800055c:	f000 f92a 	bl	80007b4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000560:	f000 f966 	bl	8000830 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000564:	f000 f9b8 	bl	80008d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fccf 	bl	8000f0c <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <main+0x64>)
 8000570:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000574:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <main+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800057c:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <main+0x64>)
 800057e:	2200      	movs	r2, #0
 8000580:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000582:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <main+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000588:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <main+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800058e:	4906      	ldr	r1, [pc, #24]	@ (80005a8 <main+0x64>)
 8000590:	2000      	movs	r0, #0
 8000592:	f000 fcf3 	bl	8000f7c <BSP_COM_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <main+0x5e>
  {
    Error_Handler();
 800059c:	f000 fa6a 	bl	8000a74 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <main+0x5e>
 80005a6:	bf00      	nop
 80005a8:	20000030 	.word	0x20000030

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	2238      	movs	r2, #56	@ 0x38
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fc5c 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f003 f8c4 	bl	800375c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005de:	2340      	movs	r3, #64	@ 0x40
 80005e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ee:	2355      	movs	r3, #85	@ 0x55
 80005f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	4618      	mov	r0, r3
 8000604:	f003 f95e 	bl	80038c4 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060e:	f000 fa31 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2303      	movs	r3, #3
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2104      	movs	r1, #4
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fc5c 	bl	8003ee8 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000636:	f000 fa1d 	bl	8000a74 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	@ 0x30
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800064a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2220      	movs	r2, #32
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f005 fc0b 	bl	8005e78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000662:	4b32      	ldr	r3, [pc, #200]	@ (800072c <MX_ADC1_Init+0xe8>)
 8000664:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000668:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800066a:	4b30      	ldr	r3, [pc, #192]	@ (800072c <MX_ADC1_Init+0xe8>)
 800066c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000672:	4b2e      	ldr	r3, [pc, #184]	@ (800072c <MX_ADC1_Init+0xe8>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000678:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <MX_ADC1_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800067e:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <MX_ADC1_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000684:	4b29      	ldr	r3, [pc, #164]	@ (800072c <MX_ADC1_Init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068a:	4b28      	ldr	r3, [pc, #160]	@ (800072c <MX_ADC1_Init+0xe8>)
 800068c:	2204      	movs	r2, #4
 800068e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000690:	4b26      	ldr	r3, [pc, #152]	@ (800072c <MX_ADC1_Init+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <MX_ADC1_Init+0xe8>)
 8000698:	2200      	movs	r2, #0
 800069a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800069c:	4b23      	ldr	r3, [pc, #140]	@ (800072c <MX_ADC1_Init+0xe8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006cc:	4817      	ldr	r0, [pc, #92]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006ce:	f000 ff49 	bl	8001564 <HAL_ADC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006d8:	f000 f9cc 	bl	8000a74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e4:	4619      	mov	r1, r3
 80006e6:	4811      	ldr	r0, [pc, #68]	@ (800072c <MX_ADC1_Init+0xe8>)
 80006e8:	f001 fcd6 	bl	8002098 <HAL_ADCEx_MultiModeConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006f2:	f000 f9bf 	bl	8000a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <MX_ADC1_Init+0xec>)
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006fa:	2306      	movs	r3, #6
 80006fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000702:	237f      	movs	r3, #127	@ 0x7f
 8000704:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000706:	2304      	movs	r3, #4
 8000708:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	@ (800072c <MX_ADC1_Init+0xe8>)
 8000714:	f001 f8aa 	bl	800186c <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800071e:	f000 f9a9 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3730      	adds	r7, #48	@ 0x30
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000040 	.word	0x20000040
 8000730:	04300002 	.word	0x04300002

08000734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <MX_I2C1_Init+0x74>)
 800073a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ac <MX_I2C1_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800073e:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <MX_I2C1_Init+0x7c>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074a:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_I2C1_Init+0x74>)
 800074c:	2201      	movs	r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800076e:	480e      	ldr	r0, [pc, #56]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000770:	f002 f854 	bl	800281c <HAL_I2C_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800077a:	f000 f97b 	bl	8000a74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4809      	ldr	r0, [pc, #36]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000782:	f002 fee4 	bl	800354e <HAL_I2CEx_ConfigAnalogFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800078c:	f000 f972 	bl	8000a74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000790:	2100      	movs	r1, #0
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_I2C1_Init+0x74>)
 8000794:	f002 ff26 	bl	80035e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800079e:	f000 f969 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000ac 	.word	0x200000ac
 80007ac:	40005400 	.word	0x40005400
 80007b0:	40b285c2 	.word	0x40b285c2

080007b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	@ (800082c <MX_SPI1_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007ea:	2218      	movs	r2, #24
 80007ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_SPI1_Init+0x74>)
 8000802:	2207      	movs	r2, #7
 8000804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_SPI1_Init+0x74>)
 800080e:	2208      	movs	r2, #8
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_SPI1_Init+0x74>)
 8000814:	f003 ff74 	bl	8004700 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 f929 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000100 	.word	0x20000100
 800082c:	40013000 	.word	0x40013000

08000830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000850:	4a20      	ldr	r2, [pc, #128]	@ (80008d4 <MX_TIM1_Init+0xa4>)
 8000852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000856:	f244 2267 	movw	r2, #16999	@ 0x4267
 800085a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000864:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000868:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086a:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800087c:	4814      	ldr	r0, [pc, #80]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 800087e:	f003 ffea 	bl	8004856 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000888:	f000 f8f4 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 800089a:	f004 f983 	bl	8004ba4 <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008a4:	f000 f8e6 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_TIM1_Init+0xa0>)
 80008ba:	f004 fbd7 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008c4:	f000 f8d6 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000164 	.word	0x20000164
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008dc:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 80008de:	4a23      	ldr	r2, [pc, #140]	@ (800096c <MX_USART1_UART_Init+0x94>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 80008e4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80008e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000920:	4811      	ldr	r0, [pc, #68]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 8000922:	f004 fc6b 	bl	80051fc <HAL_UART_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800092c:	f000 f8a2 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000930:	2100      	movs	r1, #0
 8000932:	480d      	ldr	r0, [pc, #52]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 8000934:	f005 f9d6 	bl	8005ce4 <HAL_UARTEx_SetTxFifoThreshold>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800093e:	f000 f899 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4808      	ldr	r0, [pc, #32]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 8000946:	f005 fa0b 	bl	8005d60 <HAL_UARTEx_SetRxFifoThreshold>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000950:	f000 f890 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_USART1_UART_Init+0x90>)
 8000956:	f005 f98c 	bl	8005c72 <HAL_UARTEx_DisableFifoMode>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f888 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200001b0 	.word	0x200001b0
 800096c:	40013800 	.word	0x40013800

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000986:	4b38      	ldr	r3, [pc, #224]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	4a37      	ldr	r2, [pc, #220]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000992:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000996:	f003 0320 	and.w	r3, r3, #32
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a2:	4a31      	ldr	r2, [pc, #196]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0xf8>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SERVO_OUT2_Pin|SERVO_OUT3_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2103      	movs	r1, #3
 80009d2:	4826      	ldr	r0, [pc, #152]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 80009d4:	f001 ff0a 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SERVO_OUT1_Pin|SPI_CS_GPIO_OUT_Pin|PG_CAM_OUT_Pin|SERVO_OUT4_Pin
 80009d8:	2200      	movs	r2, #0
 80009da:	f641 1112 	movw	r1, #6418	@ 0x1912
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f001 ff03 	bl	80027ec <HAL_GPIO_WritePin>
                          |G_CAM_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SERVO_OUT5_Pin|SERVO_OUT6_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2111      	movs	r1, #17
 80009ea:	4821      	ldr	r0, [pc, #132]	@ (8000a70 <MX_GPIO_Init+0x100>)
 80009ec:	f001 fefe 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SERVO_OUT2_Pin SERVO_OUT3_Pin */
  GPIO_InitStruct.Pin = SERVO_OUT2_Pin|SERVO_OUT3_Pin;
 80009f0:	2303      	movs	r3, #3
 80009f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4619      	mov	r1, r3
 8000a06:	4819      	ldr	r0, [pc, #100]	@ (8000a6c <MX_GPIO_Init+0xfc>)
 8000a08:	f001 fd6e 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_OUT1_Pin SPI_CS_GPIO_OUT_Pin PG_CAM_OUT_Pin SERVO_OUT4_Pin
                           G_CAM_OUT_Pin */
  GPIO_InitStruct.Pin = SERVO_OUT1_Pin|SPI_CS_GPIO_OUT_Pin|PG_CAM_OUT_Pin|SERVO_OUT4_Pin
 8000a0c:	f641 1312 	movw	r3, #6418	@ 0x1912
 8000a10:	60fb      	str	r3, [r7, #12]
                          |G_CAM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a28:	f001 fd5e 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_OUT5_Pin SERVO_OUT6_Pin */
  GPIO_InitStruct.Pin = SERVO_OUT5_Pin|SERVO_OUT6_Pin;
 8000a2c:	2311      	movs	r3, #17
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <MX_GPIO_Init+0x100>)
 8000a44:	f001 fd50 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG_CAM_IN_Pin G_CAM_IN_Pin */
  GPIO_InitStruct.Pin = PG_CAM_IN_Pin|G_CAM_IN_Pin;
 8000a48:	2360      	movs	r3, #96	@ 0x60
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_GPIO_Init+0x100>)
 8000a5c:	f001 fd44 	bl	80024e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48001400 	.word	0x48001400
 8000a70:	48000400 	.word	0x48000400

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <Error_Handler+0x8>

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_MspInit+0x64>)
 8000a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a94:	4a13      	ldr	r2, [pc, #76]	@ (8000ae4 <HAL_MspInit+0x64>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_MspInit+0x64>)
 8000a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x64>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <HAL_MspInit+0x64>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_MspInit+0x64>)
 8000ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 fdd5 	bl	800367c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000ad2:	f002 fe33 	bl	800373c <HAL_PWR_EnablePVD>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ad6:	f002 fee5 	bl	80038a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09a      	sub	sp, #104	@ 0x68
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2244      	movs	r2, #68	@ 0x44
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 f9b5 	bl	8005e78 <memset>
  if(hadc->Instance==ADC1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b16:	d134      	bne.n	8000b82 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b1e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 fbf9 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b34:	f7ff ff9e 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <HAL_ADC_MspInit+0xa4>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3c:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <HAL_ADC_MspInit+0xa4>)
 8000b3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_ADC_MspInit+0xa4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_ADC_MspInit+0xa4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <HAL_ADC_MspInit+0xa4>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_ADC_MspInit+0xa4>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VOLTAGE_ADC_Pin;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VOLTAGE_ADC_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7e:	f001 fcb3 	bl	80024e8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b82:	bf00      	nop
 8000b84:	3768      	adds	r7, #104	@ 0x68
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09c      	sub	sp, #112	@ 0x70
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	2244      	movs	r2, #68	@ 0x44
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f005 f961 	bl	8005e78 <memset>
  if(hi2c->Instance==I2C1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a31      	ldr	r2, [pc, #196]	@ (8000c80 <HAL_I2C_MspInit+0xf0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d15b      	bne.n	8000c78 <HAL_I2C_MspInit+0xe8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bc0:	2340      	movs	r3, #64	@ 0x40
 8000bc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fba7 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bd8:	f7ff ff4c 	bl	8000a74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be0:	4a28      	ldr	r2, [pc, #160]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be8:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf8:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c00:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin;
 8000c0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c26:	4619      	mov	r1, r3
 8000c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2c:	f001 fc5c 	bl	80024e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C_SDA_Pin;
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c34:	2312      	movs	r3, #18
 8000c36:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c40:	2304      	movs	r3, #4
 8000c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480f      	ldr	r0, [pc, #60]	@ (8000c88 <HAL_I2C_MspInit+0xf8>)
 8000c4c:	f001 fc4c 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c54:	4a0b      	ldr	r2, [pc, #44]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000c56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c5c:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_I2C_MspInit+0xf4>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2020      	movs	r0, #32
 8000c6e:	f001 fb92 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c72:	2020      	movs	r0, #32
 8000c74:	f001 fba9 	bl	80023ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c78:	bf00      	nop
 8000c7a:	3770      	adds	r7, #112	@ 0x70
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40021000 	.word	0x40021000
 8000c88:	48000400 	.word	0x48000400

08000c8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <HAL_SPI_MspInit+0x7c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d128      	bne.n	8000d00 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <HAL_SPI_MspInit+0x80>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb2:	4a16      	ldr	r2, [pc, #88]	@ (8000d0c <HAL_SPI_MspInit+0x80>)
 8000cb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_SPI_MspInit+0x80>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_SPI_MspInit+0x80>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <HAL_SPI_MspInit+0x80>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_SPI_MspInit+0x80>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cde:	23e0      	movs	r3, #224	@ 0xe0
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f001 fbf4 	bl	80024e8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	@ 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_TIM_Base_MspInit+0x44>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d113      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d26:	4a0c      	ldr	r2, [pc, #48]	@ (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2019      	movs	r0, #25
 8000d40:	f001 fb29 	bl	8002396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d44:	2019      	movs	r0, #25
 8000d46:	f001 fb40 	bl	80023ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40012c00 	.word	0x40012c00
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b09a      	sub	sp, #104	@ 0x68
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2244      	movs	r2, #68	@ 0x44
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 f87b 	bl	8005e78 <memset>
  if(huart->Instance==USART1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a1f      	ldr	r2, [pc, #124]	@ (8000e04 <HAL_UART_MspInit+0xa8>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d137      	bne.n	8000dfc <HAL_UART_MspInit+0xa0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fac1 	bl	8004320 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da4:	f7ff fe66 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <HAL_UART_MspInit+0xac>)
 8000daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dac:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <HAL_UART_MspInit+0xac>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <HAL_UART_MspInit+0xac>)
 8000db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_UART_MspInit+0xac>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc4:	4a10      	ldr	r2, [pc, #64]	@ (8000e08 <HAL_UART_MspInit+0xac>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <HAL_UART_MspInit+0xac>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8000dd8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ddc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dea:	2307      	movs	r3, #7
 8000dec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df2:	4619      	mov	r1, r3
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000df8:	f001 fb76 	bl	80024e8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3768      	adds	r7, #104	@ 0x68
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40021000 	.word	0x40021000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f98b 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e72:	f003 fd47 	bl	8004904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000164 	.word	0x20000164

08000e80 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e84:	4802      	ldr	r0, [pc, #8]	@ (8000e90 <I2C1_ER_IRQHandler+0x10>)
 8000e86:	f001 fd64 	bl	8002952 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000ac 	.word	0x200000ac

08000e94 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb8:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eba:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ebc:	f7ff ffea 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec2:	490d      	ldr	r1, [pc, #52]	@ (8000ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <LoopForever+0xe>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f04 <LoopForever+0x16>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f004 ffcf 	bl	8005e88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eea:	f7ff fb2b 	bl	8000544 <main>

08000eee <LoopForever>:

LoopForever:
    b LoopForever
 8000eee:	e7fe      	b.n	8000eee <LoopForever>
  ldr   r0, =_estack
 8000ef0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000efc:	08005f38 	.word	0x08005f38
  ldr r2, =_sbss
 8000f00:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f04:	200002dc 	.word	0x200002dc

08000f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_2_IRQHandler>
	...

08000f0c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000f16:	4b17      	ldr	r3, [pc, #92]	@ (8000f74 <BSP_LED_Init+0x68>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1a:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <BSP_LED_Init+0x68>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <BSP_LED_Init+0x68>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000f2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f32:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <BSP_LED_Init+0x6c>)
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	f107 020c 	add.w	r2, r7, #12
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f001 faca 	bl	80024e8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <BSP_LED_Init+0x6c>)
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f60:	2200      	movs	r2, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fc42 	bl	80027ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	20000004 	.word	0x20000004

08000f7c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d903      	bls.n	8000f9a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f92:	f06f 0301 	mvn.w	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e018      	b.n	8000fcc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2294      	movs	r2, #148	@ 0x94
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <BSP_COM_Init+0x5c>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f84a 	bl	8001040 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2294      	movs	r2, #148	@ 0x94
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <BSP_COM_Init+0x5c>)
 8000fb6:	4413      	add	r3, r2
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f80e 	bl	8000fdc <MX_LPUART1_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d002      	beq.n	8000fcc <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000fc6:	f06f 0303 	mvn.w	r3, #3
 8000fca:	e000      	b.n	8000fce <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000244 	.word	0x20000244

08000fdc <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_LPUART1_Init+0x60>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	895b      	ldrh	r3, [r3, #10]
 8001000:	461a      	mov	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	891b      	ldrh	r3, [r3, #8]
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	899b      	ldrh	r3, [r3, #12]
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001028:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f004 f8e6 	bl	80051fc <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <COM1_MspInit+0x94>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <COM1_MspInit+0x94>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001054:	4b1f      	ldr	r3, [pc, #124]	@ (80010d4 <COM1_MspInit+0x94>)
 8001056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001060:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <COM1_MspInit+0x94>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001064:	4a1b      	ldr	r2, [pc, #108]	@ (80010d4 <COM1_MspInit+0x94>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106c:	4b19      	ldr	r3, [pc, #100]	@ (80010d4 <COM1_MspInit+0x94>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <COM1_MspInit+0x94>)
 800107a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800107c:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <COM1_MspInit+0x94>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <COM1_MspInit+0x94>)
 8001086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001090:	2304      	movs	r3, #4
 8001092:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001098:	2302      	movs	r3, #2
 800109a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800109c:	2301      	movs	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80010a0:	230c      	movs	r3, #12
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ae:	f001 fa1b 	bl	80024e8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80010b2:	2308      	movs	r3, #8
 80010b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80010ba:	230c      	movs	r3, #12
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f001 fa0e 	bl	80024e8 <HAL_GPIO_Init>
}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	@ 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f001 f94c 	bl	8002380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f80d 	bl	8001108 <HAL_InitTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	e001      	b.n	80010fe <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010fa:	f7ff fcc1 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fe:	79fb      	ldrb	r3, [r7, #7]

}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_InitTick+0x68>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d022      	beq.n	8001162 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_InitTick+0x6c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <HAL_InitTick+0x68>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001128:	fbb1 f3f3 	udiv	r3, r1, r3
 800112c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f001 f958 	bl	80023e6 <HAL_SYSTICK_Config>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d809      	bhi.n	8001156 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001142:	2200      	movs	r2, #0
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	f04f 30ff 	mov.w	r0, #4294967295
 800114a:	f001 f924 	bl	8002396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_InitTick+0x70>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e007      	b.n	8001166 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e004      	b.n	8001166 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e001      	b.n	8001166 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000010 	.word	0x20000010
 8001174:	20000000 	.word	0x20000000
 8001178:	2000000c 	.word	0x2000000c

0800117c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <HAL_IncTick+0x1c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <HAL_IncTick+0x20>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a03      	ldr	r2, [pc, #12]	@ (8001198 <HAL_IncTick+0x1c>)
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	200002d8 	.word	0x200002d8
 800119c:	20000010 	.word	0x20000010

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200002d8 	.word	0x200002d8

080011b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	609a      	str	r2, [r3, #8]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3360      	adds	r3, #96	@ 0x60
 8001232:	461a      	mov	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <LL_ADC_SetOffset+0x44>)
 8001242:	4013      	ands	r3, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	4313      	orrs	r3, r2
 8001250:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	03fff000 	.word	0x03fff000

08001268 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3360      	adds	r3, #96	@ 0x60
 8001276:	461a      	mov	r2, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3360      	adds	r3, #96	@ 0x60
 80012a4:	461a      	mov	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b087      	sub	sp, #28
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3360      	adds	r3, #96	@ 0x60
 80012da:	461a      	mov	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	3360      	adds	r3, #96	@ 0x60
 8001310:	461a      	mov	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	431a      	orrs	r2, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800132a:	bf00      	nop
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	615a      	str	r2, [r3, #20]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	3330      	adds	r3, #48	@ 0x30
 800136c:	461a      	mov	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	4413      	add	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	211f      	movs	r1, #31
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0e9b      	lsrs	r3, r3, #26
 8001394:	f003 011f 	and.w	r1, r3, #31
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f003 031f 	and.w	r3, r3, #31
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	431a      	orrs	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3314      	adds	r3, #20
 80013c4:	461a      	mov	r2, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	0e5b      	lsrs	r3, r3, #25
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	0d1b      	lsrs	r3, r3, #20
 80013dc:	f003 031f 	and.w	r3, r3, #31
 80013e0:	2107      	movs	r1, #7
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	401a      	ands	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0d1b      	lsrs	r3, r3, #20
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	431a      	orrs	r2, r3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001424:	43db      	mvns	r3, r3
 8001426:	401a      	ands	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0318 	and.w	r3, r3, #24
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001430:	40d9      	lsrs	r1, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	400b      	ands	r3, r1
 8001436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800143a:	431a      	orrs	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	0007ffff 	.word	0x0007ffff

08001454 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001464:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6093      	str	r3, [r2, #8]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800148c:	d101      	bne.n	8001492 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80014b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <LL_ADC_IsEnabled+0x18>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_ADC_IsEnabled+0x1a>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b04      	cmp	r3, #4
 8001528:	d101      	bne.n	800152e <LL_ADC_REG_IsConversionOngoing+0x18>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b08      	cmp	r3, #8
 800154e:	d101      	bne.n	8001554 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e167      	b.n	800184e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff faab 	bl	8000ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff67 	bl	8001478 <LL_ADC_IsDeepPowerDownEnabled>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d004      	beq.n	80015ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff4d 	bl	8001454 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff82 	bl	80014c8 <LL_ADC_IsInternalRegulatorEnabled>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d115      	bne.n	80015f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff66 	bl	80014a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001858 <HAL_ADC_Init+0x2f4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	4aa0      	ldr	r2, [pc, #640]	@ (800185c <HAL_ADC_Init+0x2f8>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	099b      	lsrs	r3, r3, #6
 80015e2:	3301      	adds	r3, #1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015e8:	e002      	b.n	80015f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f9      	bne.n	80015ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff64 	bl	80014c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10d      	bne.n	8001622 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160a:	f043 0210 	orr.w	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff75 	bl	8001516 <LL_ADC_REG_IsConversionOngoing>
 800162c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8100 	bne.w	800183c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 80fc 	bne.w	800183c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001648:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800164c:	f043 0202 	orr.w	r2, r3, #2
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff49 	bl	80014f0 <LL_ADC_IsEnabled>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001664:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001668:	f7ff ff42 	bl	80014f0 <LL_ADC_IsEnabled>
 800166c:	4604      	mov	r4, r0
 800166e:	487c      	ldr	r0, [pc, #496]	@ (8001860 <HAL_ADC_Init+0x2fc>)
 8001670:	f7ff ff3e 	bl	80014f0 <LL_ADC_IsEnabled>
 8001674:	4603      	mov	r3, r0
 8001676:	4323      	orrs	r3, r4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4619      	mov	r1, r3
 8001682:	4878      	ldr	r0, [pc, #480]	@ (8001864 <HAL_ADC_Init+0x300>)
 8001684:	f7ff fd98 	bl	80011b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7f5b      	ldrb	r3, [r3, #29]
 800168c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001692:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001698:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800169e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d106      	bne.n	80016c4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ba:	3b01      	subs	r3, #1
 80016bc:	045b      	lsls	r3, r3, #17
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	4b60      	ldr	r3, [pc, #384]	@ (8001868 <HAL_ADC_Init+0x304>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	69b9      	ldr	r1, [r7, #24]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff14 	bl	800153c <LL_ADC_INJ_IsConversionOngoing>
 8001714:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d16d      	bne.n	80017f8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d16a      	bne.n	80017f8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001726:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800172e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800173e:	f023 0302 	bic.w	r3, r3, #2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	430b      	orrs	r3, r1
 800174a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d017      	beq.n	8001784 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001762:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800176c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6911      	ldr	r1, [r2, #16]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001782:	e013      	b.n	80017ac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691a      	ldr	r2, [r3, #16]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001792:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80017a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d118      	bne.n	80017e8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017cc:	4311      	orrs	r1, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017d2:	4311      	orrs	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017d8:	430a      	orrs	r2, r1
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0201 	orr.w	r2, r2, #1
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	e007      	b.n	80017f8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10c      	bne.n	800181a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f023 010f 	bic.w	r1, r3, #15
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	1e5a      	subs	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
 8001818:	e007      	b.n	800182a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 020f 	bic.w	r2, r2, #15
 8001828:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	65da      	str	r2, [r3, #92]	@ 0x5c
 800183a:	e007      	b.n	800184c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	f043 0210 	orr.w	r2, r3, #16
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800184c:	7ffb      	ldrb	r3, [r7, #31]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	bf00      	nop
 8001858:	20000000 	.word	0x20000000
 800185c:	053e2d63 	.word	0x053e2d63
 8001860:	50000100 	.word	0x50000100
 8001864:	50000300 	.word	0x50000300
 8001868:	fff04007 	.word	0xfff04007

0800186c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0b6      	sub	sp, #216	@ 0xd8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x22>
 800188a:	2302      	movs	r3, #2
 800188c:	e3c8      	b.n	8002020 <HAL_ADC_ConfigChannel+0x7b4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fe3b 	bl	8001516 <LL_ADC_REG_IsConversionOngoing>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 83ad 	bne.w	8002002 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	f7ff fd51 	bl	800135c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fe29 	bl	8001516 <LL_ADC_REG_IsConversionOngoing>
 80018c4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe35 	bl	800153c <LL_ADC_INJ_IsConversionOngoing>
 80018d2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 81d9 	bne.w	8001c92 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 81d4 	bne.w	8001c92 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018f2:	d10f      	bne.n	8001914 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2200      	movs	r2, #0
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff fd58 	bl	80013b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fd12 	bl	8001336 <LL_ADC_SetSamplingTimeCommonConfig>
 8001912:	e00e      	b.n	8001932 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	461a      	mov	r2, r3
 8001922:	f7ff fd47 	bl	80013b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fd02 	bl	8001336 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	695a      	ldr	r2, [r3, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d022      	beq.n	800199a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6919      	ldr	r1, [r3, #16]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001964:	f7ff fc5c 	bl	8001220 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6919      	ldr	r1, [r3, #16]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	461a      	mov	r2, r3
 8001976:	f7ff fca8 	bl	80012ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001986:	2b01      	cmp	r3, #1
 8001988:	d102      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x124>
 800198a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800198e:	e000      	b.n	8001992 <HAL_ADC_ConfigChannel+0x126>
 8001990:	2300      	movs	r3, #0
 8001992:	461a      	mov	r2, r3
 8001994:	f7ff fcb4 	bl	8001300 <LL_ADC_SetOffsetSaturation>
 8001998:	e17b      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fc61 	bl	8001268 <LL_ADC_GetOffsetChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x15a>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fc56 	bl	8001268 <LL_ADC_GetOffsetChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	e01e      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x198>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fc4b 	bl	8001268 <LL_ADC_GetOffsetChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80019e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80019f4:	2320      	movs	r3, #32
 80019f6:	e004      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80019f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1b0>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	0e9b      	lsrs	r3, r3, #26
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	e018      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x1e2>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001a38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e004      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001a44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a48:	fab3 f383 	clz	r3, r3
 8001a4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d106      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fc1a 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2101      	movs	r1, #1
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fbfe 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x220>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fbf3 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001a82:	4603      	mov	r3, r0
 8001a84:	0e9b      	lsrs	r3, r3, #26
 8001a86:	f003 021f 	and.w	r2, r3, #31
 8001a8a:	e01e      	b.n	8001aca <HAL_ADC_ConfigChannel+0x25e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fbe8 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001aae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e004      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001abe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ac2:	fab3 f383 	clz	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x276>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	e018      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x2a8>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001afe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001b06:	2320      	movs	r3, #32
 8001b08:	e004      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d106      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2101      	movs	r1, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fbb7 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fb9b 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x2e6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2102      	movs	r1, #2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fb90 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	0e9b      	lsrs	r3, r3, #26
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	e01e      	b.n	8001b90 <HAL_ADC_ConfigChannel+0x324>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2102      	movs	r1, #2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fb85 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e004      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x33c>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0e9b      	lsrs	r3, r3, #26
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	e016      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x36a>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e004      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bd0:	fab3 f383 	clz	r3, r3
 8001bd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d106      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2200      	movs	r2, #0
 8001be0:	2102      	movs	r1, #2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fb56 	bl	8001294 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2103      	movs	r1, #3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fb3a 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x3a8>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2103      	movs	r1, #3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fb2f 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	f003 021f 	and.w	r2, r3, #31
 8001c12:	e017      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x3d8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2103      	movs	r1, #3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fb24 	bl	8001268 <LL_ADC_GetOffsetChannel>
 8001c20:	4603      	mov	r3, r0
 8001c22:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c2e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001c36:	2320      	movs	r3, #32
 8001c38:	e003      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001c3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x3f0>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	f003 031f 	and.w	r3, r3, #31
 8001c5a:	e011      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x414>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001c74:	2320      	movs	r3, #32
 8001c76:	e003      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb01 	bl	8001294 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fc2a 	bl	80014f0 <LL_ADC_IsEnabled>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 8140 	bne.w	8001f24 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f7ff fbab 	bl	800140c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4a8f      	ldr	r2, [pc, #572]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x68c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	f040 8131 	bne.w	8001f24 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x47e>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	0e9b      	lsrs	r3, r3, #26
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2b09      	cmp	r3, #9
 8001ce0:	bf94      	ite	ls
 8001ce2:	2301      	movls	r3, #1
 8001ce4:	2300      	movhi	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e019      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x4b2>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cfa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001cfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001d02:	2320      	movs	r3, #32
 8001d04:	e003      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	bf94      	ite	ls
 8001d18:	2301      	movls	r3, #1
 8001d1a:	2300      	movhi	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d079      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x4d2>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	3301      	adds	r3, #1
 8001d36:	069b      	lsls	r3, r3, #26
 8001d38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d3c:	e015      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x4fe>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001d56:	2320      	movs	r3, #32
 8001d58:	e003      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	069b      	lsls	r3, r3, #26
 8001d66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x51e>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0e9b      	lsrs	r3, r3, #26
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	e017      	b.n	8001dba <HAL_ADC_ConfigChannel+0x54e>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e003      	b.n	8001dae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	ea42 0103 	orr.w	r1, r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x574>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0e9b      	lsrs	r3, r3, #26
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f003 021f 	and.w	r2, r3, #31
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	051b      	lsls	r3, r3, #20
 8001dde:	e018      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x5a6>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001df8:	2320      	movs	r3, #32
 8001dfa:	e003      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3301      	adds	r3, #1
 8001e06:	f003 021f 	and.w	r2, r3, #31
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e12:	430b      	orrs	r3, r1
 8001e14:	e081      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d107      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x5c6>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	3301      	adds	r3, #1
 8001e2a:	069b      	lsls	r3, r3, #26
 8001e2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e30:	e015      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x5f2>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e42:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	e003      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	069b      	lsls	r3, r3, #26
 8001e5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x612>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0e9b      	lsrs	r3, r3, #26
 8001e70:	3301      	adds	r3, #1
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	e017      	b.n	8001eae <HAL_ADC_ConfigChannel+0x642>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	61fb      	str	r3, [r7, #28]
  return result;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	ea42 0103 	orr.w	r1, r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10d      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x66e>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	0e9b      	lsrs	r3, r3, #26
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	f003 021f 	and.w	r2, r3, #31
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b1e      	subs	r3, #30
 8001ed2:	051b      	lsls	r3, r3, #20
 8001ed4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	e01e      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x6ac>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	613b      	str	r3, [r7, #16]
  return result;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d104      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e006      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x698>
 8001ef6:	bf00      	nop
 8001ef8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fab3 f383 	clz	r3, r3
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f003 021f 	and.w	r2, r3, #31
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	3b1e      	subs	r3, #30
 8001f12:	051b      	lsls	r3, r3, #20
 8001f14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7ff fa48 	bl	80013b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b3f      	ldr	r3, [pc, #252]	@ (8002028 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d071      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f30:	483e      	ldr	r0, [pc, #248]	@ (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f32:	f7ff f967 	bl	8001204 <LL_ADC_GetCommonPathInternalCh>
 8001f36:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002030 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d004      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x6e2>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a3a      	ldr	r2, [pc, #232]	@ (8002034 <HAL_ADC_ConfigChannel+0x7c8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d127      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d121      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f62:	d157      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	482f      	ldr	r0, [pc, #188]	@ (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001f70:	f7ff f935 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f74:	4b30      	ldr	r3, [pc, #192]	@ (8002038 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	4a30      	ldr	r2, [pc, #192]	@ (800203c <HAL_ADC_ConfigChannel+0x7d0>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	099b      	lsrs	r3, r3, #6
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f8e:	e002      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f9      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f9c:	e03a      	b.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a27      	ldr	r2, [pc, #156]	@ (8002040 <HAL_ADC_ConfigChannel+0x7d4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d113      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d02a      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4818      	ldr	r0, [pc, #96]	@ (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001fca:	f7ff f908 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fce:	e021      	b.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11c      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d116      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a16      	ldr	r2, [pc, #88]	@ (8002044 <HAL_ADC_ConfigChannel+0x7d8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d011      	beq.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ff4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480c      	ldr	r0, [pc, #48]	@ (800202c <HAL_ADC_ConfigChannel+0x7c0>)
 8001ffc:	f7ff f8ef 	bl	80011de <LL_ADC_SetCommonPathInternalCh>
 8002000:	e008      	b.n	8002014 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800201c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002020:	4618      	mov	r0, r3
 8002022:	37d8      	adds	r7, #216	@ 0xd8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	80080000 	.word	0x80080000
 800202c:	50000300 	.word	0x50000300
 8002030:	c3210000 	.word	0xc3210000
 8002034:	90c00010 	.word	0x90c00010
 8002038:	20000000 	.word	0x20000000
 800203c:	053e2d63 	.word	0x053e2d63
 8002040:	c7520000 	.word	0xc7520000
 8002044:	50000100 	.word	0x50000100
 8002048:	cb840000 	.word	0xcb840000

0800204c <LL_ADC_IsEnabled>:
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <LL_ADC_IsEnabled+0x18>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <LL_ADC_IsEnabled+0x1a>
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <LL_ADC_REG_IsConversionOngoing>:
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d101      	bne.n	800208a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b0a1      	sub	sp, #132	@ 0x84
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e08b      	b.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020be:	2300      	movs	r3, #0
 80020c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020c2:	2300      	movs	r3, #0
 80020c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ce:	d102      	bne.n	80020d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020d0:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	e001      	b.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e4:	f043 0220 	orr.w	r2, r3, #32
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e06a      	b.n	80021ce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffb9 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 8002100:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ffb3 	bl	8002072 <LL_ADC_REG_IsConversionOngoing>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d14c      	bne.n	80021ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002112:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002114:	2b00      	cmp	r3, #0
 8002116:	d149      	bne.n	80021ac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002118:	4b30      	ldr	r3, [pc, #192]	@ (80021dc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800211a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d028      	beq.n	8002176 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002124:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6859      	ldr	r1, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002136:	035b      	lsls	r3, r3, #13
 8002138:	430b      	orrs	r3, r1
 800213a:	431a      	orrs	r2, r3
 800213c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800213e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002140:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002144:	f7ff ff82 	bl	800204c <LL_ADC_IsEnabled>
 8002148:	4604      	mov	r4, r0
 800214a:	4823      	ldr	r0, [pc, #140]	@ (80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800214c:	f7ff ff7e 	bl	800204c <LL_ADC_IsEnabled>
 8002150:	4603      	mov	r3, r0
 8002152:	4323      	orrs	r3, r4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d133      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002160:	f023 030f 	bic.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	6811      	ldr	r1, [r2, #0]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	6892      	ldr	r2, [r2, #8]
 800216c:	430a      	orrs	r2, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002172:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002174:	e024      	b.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002176:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800217e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002180:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002182:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002186:	f7ff ff61 	bl	800204c <LL_ADC_IsEnabled>
 800218a:	4604      	mov	r4, r0
 800218c:	4812      	ldr	r0, [pc, #72]	@ (80021d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800218e:	f7ff ff5d 	bl	800204c <LL_ADC_IsEnabled>
 8002192:	4603      	mov	r3, r0
 8002194:	4323      	orrs	r3, r4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d112      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800219a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021a2:	f023 030f 	bic.w	r3, r3, #15
 80021a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021aa:	e009      	b.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80021be:	e000      	b.n	80021c2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3784      	adds	r7, #132	@ 0x84
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}
 80021d6:	bf00      	nop
 80021d8:	50000100 	.word	0x50000100
 80021dc:	50000300 	.word	0x50000300

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	@ (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	@ (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	@ (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	@ (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800234c:	d301      	bcc.n	8002352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234e:	2301      	movs	r3, #1
 8002350:	e00f      	b.n	8002372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <SysTick_Config+0x40>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800235a:	210f      	movs	r1, #15
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f7ff ff8e 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002364:	4b05      	ldr	r3, [pc, #20]	@ (800237c <SysTick_Config+0x40>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800236a:	4b04      	ldr	r3, [pc, #16]	@ (800237c <SysTick_Config+0x40>)
 800236c:	2207      	movs	r2, #7
 800236e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	e000e010 	.word	0xe000e010

08002380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	4603      	mov	r3, r0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff40 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff90 	bl	80022d4 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5f 	bl	8002280 <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff33 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa4 	bl	800233c <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d00d      	beq.n	8002432 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2204      	movs	r2, #4
 800241a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e047      	b.n	80024c2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 020e 	bic.w	r2, r2, #14
 8002440:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0201 	bic.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800245c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	f003 021f 	and.w	r2, r3, #31
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800247e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00c      	beq.n	80024a2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002496:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80024a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
    }
  }
  return status;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024f6:	e15a      	b.n	80027ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 814c 	beq.w	80027a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d005      	beq.n	8002528 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002524:	2b02      	cmp	r3, #2
 8002526:	d130      	bne.n	800258a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255e:	2201      	movs	r2, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0201 	and.w	r2, r3, #1
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b03      	cmp	r3, #3
 8002594:	d017      	beq.n	80025c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4013      	ands	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d123      	bne.n	800261a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	6939      	ldr	r1, [r7, #16]
 8002616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4013      	ands	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0203 	and.w	r2, r3, #3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80a6 	beq.w	80027a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265c:	4b5b      	ldr	r3, [pc, #364]	@ (80027cc <HAL_GPIO_Init+0x2e4>)
 800265e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002660:	4a5a      	ldr	r2, [pc, #360]	@ (80027cc <HAL_GPIO_Init+0x2e4>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6613      	str	r3, [r2, #96]	@ 0x60
 8002668:	4b58      	ldr	r3, [pc, #352]	@ (80027cc <HAL_GPIO_Init+0x2e4>)
 800266a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002674:	4a56      	ldr	r2, [pc, #344]	@ (80027d0 <HAL_GPIO_Init+0x2e8>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800269e:	d01f      	beq.n	80026e0 <HAL_GPIO_Init+0x1f8>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a4c      	ldr	r2, [pc, #304]	@ (80027d4 <HAL_GPIO_Init+0x2ec>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d019      	beq.n	80026dc <HAL_GPIO_Init+0x1f4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a4b      	ldr	r2, [pc, #300]	@ (80027d8 <HAL_GPIO_Init+0x2f0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d013      	beq.n	80026d8 <HAL_GPIO_Init+0x1f0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a4a      	ldr	r2, [pc, #296]	@ (80027dc <HAL_GPIO_Init+0x2f4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00d      	beq.n	80026d4 <HAL_GPIO_Init+0x1ec>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a49      	ldr	r2, [pc, #292]	@ (80027e0 <HAL_GPIO_Init+0x2f8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <HAL_GPIO_Init+0x1e8>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a48      	ldr	r2, [pc, #288]	@ (80027e4 <HAL_GPIO_Init+0x2fc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026c8:	2305      	movs	r3, #5
 80026ca:	e00a      	b.n	80026e2 <HAL_GPIO_Init+0x1fa>
 80026cc:	2306      	movs	r3, #6
 80026ce:	e008      	b.n	80026e2 <HAL_GPIO_Init+0x1fa>
 80026d0:	2304      	movs	r3, #4
 80026d2:	e006      	b.n	80026e2 <HAL_GPIO_Init+0x1fa>
 80026d4:	2303      	movs	r3, #3
 80026d6:	e004      	b.n	80026e2 <HAL_GPIO_Init+0x1fa>
 80026d8:	2302      	movs	r3, #2
 80026da:	e002      	b.n	80026e2 <HAL_GPIO_Init+0x1fa>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_GPIO_Init+0x1fa>
 80026e0:	2300      	movs	r3, #0
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	f002 0203 	and.w	r2, r2, #3
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	4093      	lsls	r3, r2
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f2:	4937      	ldr	r1, [pc, #220]	@ (80027d0 <HAL_GPIO_Init+0x2e8>)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002700:	4b39      	ldr	r3, [pc, #228]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002724:	4a30      	ldr	r2, [pc, #192]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800272a:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800274e:	4a26      	ldr	r2, [pc, #152]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002754:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002778:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027a2:	4a11      	ldr	r2, [pc, #68]	@ (80027e8 <HAL_GPIO_Init+0x300>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3301      	adds	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f47f ae9d 	bne.w	80024f8 <HAL_GPIO_Init+0x10>
  }
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000
 80027d4:	48000400 	.word	0x48000400
 80027d8:	48000800 	.word	0x48000800
 80027dc:	48000c00 	.word	0x48000c00
 80027e0:	48001000 	.word	0x48001000
 80027e4:	48001400 	.word	0x48001400
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002808:	e002      	b.n	8002810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e08d      	b.n	800294a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f9a4 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	@ 0x24
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800286c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800287c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e006      	b.n	80028a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d108      	bne.n	80028be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	e007      	b.n	80028ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69d9      	ldr	r1, [r3, #28]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	09db      	lsrs	r3, r3, #7
 800297a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002996:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d010      	beq.n	80029c6 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	09db      	lsrs	r3, r3, #7
 80029a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b4:	f043 0208 	orr.w	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029c4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	0a5b      	lsrs	r3, r3, #9
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d010      	beq.n	80029f4 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	09db      	lsrs	r3, r3, #7
 80029d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f043 0202 	orr.w	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029f2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 030b 	and.w	r3, r3, #11
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fbea 	bl	80031e0 <I2C_ITError>
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <I2C_Slave_ISR_IT+0x24>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e0ed      	b.n	8002c94 <I2C_Slave_ISR_IT+0x200>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ad8:	6939      	ldr	r1, [r7, #16]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f9c0 	bl	8002e60 <I2C_ITSlaveCplt>
 8002ae0:	e0d3      	b.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d04d      	beq.n	8002b8a <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d047      	beq.n	8002b8a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d128      	bne.n	8002b56 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b28      	cmp	r3, #40	@ 0x28
 8002b0e:	d108      	bne.n	8002b22 <I2C_Slave_ISR_IT+0x8e>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b16:	d104      	bne.n	8002b22 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b18:	6939      	ldr	r1, [r7, #16]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fb0a 	bl	8003134 <I2C_ITListenCplt>
 8002b20:	e032      	b.n	8002b88 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b29      	cmp	r3, #41	@ 0x29
 8002b2c:	d10e      	bne.n	8002b4c <I2C_Slave_ISR_IT+0xb8>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b34:	d00a      	beq.n	8002b4c <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fc65 	bl	800340e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f92d 	bl	8002da4 <I2C_ITSlaveSeqCplt>
 8002b4a:	e01d      	b.n	8002b88 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b54:	e096      	b.n	8002c84 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f043 0204 	orr.w	r2, r3, #4
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <I2C_Slave_ISR_IT+0xe6>
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b76:	f040 8085 	bne.w	8002c84 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	4619      	mov	r1, r3
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fb2d 	bl	80031e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b86:	e07d      	b.n	8002c84 <I2C_Slave_ISR_IT+0x1f0>
 8002b88:	e07c      	b.n	8002c84 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d030      	beq.n	8002bf8 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d02a      	beq.n	8002bf8 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d018      	beq.n	8002bde <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d14f      	bne.n	8002c88 <I2C_Slave_ISR_IT+0x1f4>
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bee:	d04b      	beq.n	8002c88 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f8d7 	bl	8002da4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002bf6:	e047      	b.n	8002c88 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	08db      	lsrs	r3, r3, #3
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	08db      	lsrs	r3, r3, #3
 8002c08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c10:	6939      	ldr	r1, [r7, #16]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f842 	bl	8002c9c <I2C_ITAddrCplt>
 8002c18:	e037      	b.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d031      	beq.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02b      	beq.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d018      	beq.n	8002c6e <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002c6c:	e00d      	b.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c74:	d002      	beq.n	8002c7c <I2C_Slave_ISR_IT+0x1e8>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f891 	bl	8002da4 <I2C_ITSlaveSeqCplt>
 8002c82:	e002      	b.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8002c84:	bf00      	nop
 8002c86:	e000      	b.n	8002c8a <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8002c88:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002cb2:	2b28      	cmp	r3, #40	@ 0x28
 8002cb4:	d16a      	bne.n	8002d8c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002cd4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002cf0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d138      	bne.n	8002d6c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	09db      	lsrs	r3, r3, #7
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	89bb      	ldrh	r3, [r7, #12]
 8002d02:	4053      	eors	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f003 0306 	and.w	r3, r3, #6
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d11c      	bne.n	8002d48 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d13b      	bne.n	8002d9c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2208      	movs	r2, #8
 8002d30:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d3a:	89ba      	ldrh	r2, [r7, #12]
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff fe7b 	bl	8002a3c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d46:	e029      	b.n	8002d9c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fb9e 	bl	8003492 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d5e:	89ba      	ldrh	r2, [r7, #12]
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff fe69 	bl	8002a3c <HAL_I2C_AddrCallback>
}
 8002d6a:	e017      	b.n	8002d9c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fb8e 	bl	8003492 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d7e:	89ba      	ldrh	r2, [r7, #12]
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fe59 	bl	8002a3c <HAL_I2C_AddrCallback>
}
 8002d8a:	e007      	b.n	8002d9c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2208      	movs	r2, #8
 8002d92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	0b9b      	lsrs	r3, r3, #14
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e00d      	b.n	8002df6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	0bdb      	lsrs	r3, r3, #15
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b29      	cmp	r3, #41	@ 0x29
 8002e00:	d112      	bne.n	8002e28 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2228      	movs	r2, #40	@ 0x28
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2221      	movs	r2, #33	@ 0x21
 8002e0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e10:	2101      	movs	r1, #1
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fb3d 	bl	8003492 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fdf7 	bl	8002a14 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e26:	e017      	b.n	8002e58 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e32:	d111      	bne.n	8002e58 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2228      	movs	r2, #40	@ 0x28
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2222      	movs	r2, #34	@ 0x22
 8002e40:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e42:	2102      	movs	r1, #2
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fb24 	bl	8003492 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff fde8 	bl	8002a28 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e82:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	2b21      	cmp	r3, #33	@ 0x21
 8002e90:	d002      	beq.n	8002e98 <I2C_ITSlaveCplt+0x38>
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	2b29      	cmp	r3, #41	@ 0x29
 8002e96:	d108      	bne.n	8002eaa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002e98:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 faf8 	bl	8003492 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2221      	movs	r2, #33	@ 0x21
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ea8:	e019      	b.n	8002ede <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	2b22      	cmp	r3, #34	@ 0x22
 8002eae:	d002      	beq.n	8002eb6 <I2C_ITSlaveCplt+0x56>
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eb4:	d108      	bne.n	8002ec8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002eb6:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fae9 	bl	8003492 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2222      	movs	r2, #34	@ 0x22
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ec6:	e00a      	b.n	8002ede <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	2b28      	cmp	r3, #40	@ 0x28
 8002ecc:	d107      	bne.n	8002ede <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ece:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fadd 	bl	8003492 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eec:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800312c <I2C_ITSlaveCplt+0x2cc>)
 8002efa:	400b      	ands	r3, r1
 8002efc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fa85 	bl	800340e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	0b9b      	lsrs	r3, r3, #14
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d013      	beq.n	8002f38 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f36:	e018      	b.n	8002f6a <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	0bdb      	lsrs	r3, r3, #15
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f52:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	089b      	lsrs	r3, r3, #2
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d020      	beq.n	8002fb8 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00c      	beq.n	8002fb8 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	091b      	lsrs	r3, r3, #4
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04a      	beq.n	8003070 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d044      	beq.n	8003070 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d128      	bne.n	8003042 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b28      	cmp	r3, #40	@ 0x28
 8002ffa:	d108      	bne.n	800300e <I2C_ITSlaveCplt+0x1ae>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003002:	d104      	bne.n	800300e <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f894 	bl	8003134 <I2C_ITListenCplt>
 800300c:	e030      	b.n	8003070 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b29      	cmp	r3, #41	@ 0x29
 8003018:	d10e      	bne.n	8003038 <I2C_ITSlaveCplt+0x1d8>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003020:	d00a      	beq.n	8003038 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2210      	movs	r2, #16
 8003028:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f9ef 	bl	800340e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff feb7 	bl	8002da4 <I2C_ITSlaveSeqCplt>
 8003036:	e01b      	b.n	8003070 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2210      	movs	r2, #16
 800303e:	61da      	str	r2, [r3, #28]
 8003040:	e016      	b.n	8003070 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2210      	movs	r2, #16
 8003048:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <I2C_ITSlaveCplt+0x204>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003062:	d105      	bne.n	8003070 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8b8 	bl	80031e0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f8a7 	bl	80031e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b28      	cmp	r3, #40	@ 0x28
 800309c:	d141      	bne.n	8003122 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f847 	bl	8003134 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030a6:	e03c      	b.n	8003122 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030b0:	d014      	beq.n	80030dc <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fe76 	bl	8002da4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <I2C_ITSlaveCplt+0x2d0>)
 80030bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff fcbf 	bl	8002a58 <HAL_I2C_ListenCpltCallback>
}
 80030da:	e022      	b.n	8003122 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b22      	cmp	r3, #34	@ 0x22
 80030e6:	d10e      	bne.n	8003106 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fc92 	bl	8002a28 <HAL_I2C_SlaveRxCpltCallback>
}
 8003104:	e00d      	b.n	8003122 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fc79 	bl	8002a14 <HAL_I2C_SlaveTxCpltCallback>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	fe00e800 	.word	0xfe00e800
 8003130:	ffff0000 	.word	0xffff0000

08003134 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <I2C_ITListenCplt+0xa8>)
 8003142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d022      	beq.n	80031b2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031b2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f96b 	bl	8003492 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2210      	movs	r2, #16
 80031c2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff fc43 	bl	8002a58 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	ffff0000 	.word	0xffff0000

080031e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a6d      	ldr	r2, [pc, #436]	@ (80033b4 <I2C_ITError+0x1d4>)
 80031fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b28      	cmp	r3, #40	@ 0x28
 8003216:	d005      	beq.n	8003224 <I2C_ITError+0x44>
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b29      	cmp	r3, #41	@ 0x29
 800321c:	d002      	beq.n	8003224 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b2a      	cmp	r3, #42	@ 0x2a
 8003222:	d10b      	bne.n	800323c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003224:	2103      	movs	r1, #3
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f933 	bl	8003492 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2228      	movs	r2, #40	@ 0x28
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a60      	ldr	r2, [pc, #384]	@ (80033b8 <I2C_ITError+0x1d8>)
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34
 800323a:	e030      	b.n	800329e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800323c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f926 	bl	8003492 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8e1 	bl	800340e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b60      	cmp	r3, #96	@ 0x60
 8003256:	d01f      	beq.n	8003298 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b20      	cmp	r3, #32
 800326c:	d114      	bne.n	8003298 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	d109      	bne.n	8003290 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2210      	movs	r2, #16
 8003282:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2220      	movs	r2, #32
 8003296:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d039      	beq.n	8003320 <I2C_ITError+0x140>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b11      	cmp	r3, #17
 80032b0:	d002      	beq.n	80032b8 <I2C_ITError+0xd8>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b21      	cmp	r3, #33	@ 0x21
 80032b6:	d133      	bne.n	8003320 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032c6:	d107      	bne.n	80032d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff f8f5 	bl	80024cc <HAL_DMA_GetState>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d017      	beq.n	8003318 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	4a33      	ldr	r2, [pc, #204]	@ (80033bc <I2C_ITError+0x1dc>)
 80032ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f87e 	bl	80023fe <HAL_DMA_Abort_IT>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d04d      	beq.n	80033a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003312:	4610      	mov	r0, r2
 8003314:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003316:	e045      	b.n	80033a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f851 	bl	80033c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800331e:	e041      	b.n	80033a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d039      	beq.n	800339c <I2C_ITError+0x1bc>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b12      	cmp	r3, #18
 800332c:	d002      	beq.n	8003334 <I2C_ITError+0x154>
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b22      	cmp	r3, #34	@ 0x22
 8003332:	d133      	bne.n	800339c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003342:	d107      	bne.n	8003354 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003352:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff f8b7 	bl	80024cc <HAL_DMA_GetState>
 800335e:	4603      	mov	r3, r0
 8003360:	2b01      	cmp	r3, #1
 8003362:	d017      	beq.n	8003394 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	4a14      	ldr	r2, [pc, #80]	@ (80033bc <I2C_ITError+0x1dc>)
 800336a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f840 	bl	80023fe <HAL_DMA_Abort_IT>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d011      	beq.n	80033a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800338e:	4610      	mov	r0, r2
 8003390:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003392:	e009      	b.n	80033a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f813 	bl	80033c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800339a:	e005      	b.n	80033a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f80f 	bl	80033c0 <I2C_TreatErrorCallback>
  }
}
 80033a2:	e002      	b.n	80033aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033a4:	bf00      	nop
 80033a6:	e000      	b.n	80033aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033a8:	bf00      	nop
}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	ffff0000 	.word	0xffff0000
 80033b8:	08002a95 	.word	0x08002a95
 80033bc:	08003457 	.word	0x08003457

080033c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b60      	cmp	r3, #96	@ 0x60
 80033d2:	d10e      	bne.n	80033f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fb48 	bl	8002a80 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033f0:	e009      	b.n	8003406 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff fb33 	bl	8002a6c <HAL_I2C_ErrorCallback>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b02      	cmp	r3, #2
 8003422:	d103      	bne.n	800342c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d007      	beq.n	800344a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0201 	orr.w	r2, r2, #1
 8003448:	619a      	str	r2, [r3, #24]
  }
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	2200      	movs	r2, #0
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003480:	2200      	movs	r2, #0
 8003482:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ff9b 	bl	80033c0 <I2C_TreatErrorCallback>
}
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00f      	beq.n	80034cc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80034b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034c0:	2b28      	cmp	r3, #40	@ 0x28
 80034c2:	d003      	beq.n	80034cc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80034ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80034cc:	887b      	ldrh	r3, [r7, #2]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00f      	beq.n	80034f6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80034dc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034ea:	2b28      	cmp	r3, #40	@ 0x28
 80034ec:	d003      	beq.n	80034f6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80034f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da03      	bge.n	8003506 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003504:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	2b10      	cmp	r3, #16
 800350a:	d103      	bne.n	8003514 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003512:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	2b20      	cmp	r3, #32
 8003518:	d103      	bne.n	8003522 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f043 0320 	orr.w	r3, r3, #32
 8003520:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	d103      	bne.n	8003530 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800352e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	43da      	mvns	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	400a      	ands	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	d138      	bne.n	80035d6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800356e:	2302      	movs	r3, #2
 8003570:	e032      	b.n	80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2224      	movs	r2, #36	@ 0x24
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035a0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6819      	ldr	r1, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d139      	bne.n	800366e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003604:	2302      	movs	r3, #2
 8003606:	e033      	b.n	8003670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003636:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003684:	4b2b      	ldr	r3, [pc, #172]	@ (8003734 <HAL_PWR_ConfigPVD+0xb8>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 020e 	bic.w	r2, r3, #14
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4928      	ldr	r1, [pc, #160]	@ (8003734 <HAL_PWR_ConfigPVD+0xb8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003696:	4b28      	ldr	r3, [pc, #160]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a27      	ldr	r2, [pc, #156]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 800369c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036a0:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80036a2:	4b25      	ldr	r3, [pc, #148]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a24      	ldr	r2, [pc, #144]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80036ae:	4b22      	ldr	r3, [pc, #136]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4a21      	ldr	r2, [pc, #132]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b8:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80036ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	4a1e      	ldr	r2, [pc, #120]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c4:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80036d2:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a18      	ldr	r2, [pc, #96]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80036ea:	4b13      	ldr	r3, [pc, #76]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a12      	ldr	r2, [pc, #72]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f4:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4a0c      	ldr	r2, [pc, #48]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370c:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a06      	ldr	r2, [pc, #24]	@ (8003738 <HAL_PWR_ConfigPVD+0xbc>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003724:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40007000 	.word	0x40007000
 8003738:	40010400 	.word	0x40010400

0800373c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8003740:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_PWR_EnablePVD+0x1c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a04      	ldr	r2, [pc, #16]	@ (8003758 <HAL_PWR_EnablePVD+0x1c>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6053      	str	r3, [r2, #4]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40007000 	.word	0x40007000

0800375c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d141      	bne.n	80037ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800376a:	4b4b      	ldr	r3, [pc, #300]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003776:	d131      	bne.n	80037dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003778:	4b47      	ldr	r3, [pc, #284]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800377e:	4a46      	ldr	r2, [pc, #280]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003784:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003788:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003790:	4a41      	ldr	r2, [pc, #260]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003796:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003798:	4b40      	ldr	r3, [pc, #256]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2232      	movs	r2, #50	@ 0x32
 800379e:	fb02 f303 	mul.w	r3, r2, r3
 80037a2:	4a3f      	ldr	r2, [pc, #252]	@ (80038a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	0c9b      	lsrs	r3, r3, #18
 80037aa:	3301      	adds	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ae:	e002      	b.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b6:	4b38      	ldr	r3, [pc, #224]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c2:	d102      	bne.n	80037ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f2      	bne.n	80037b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037ca:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d6:	d158      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e057      	b.n	800388c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e2:	4a2d      	ldr	r2, [pc, #180]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037ec:	e04d      	b.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f4:	d141      	bne.n	800387a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037f6:	4b28      	ldr	r3, [pc, #160]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003802:	d131      	bne.n	8003868 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003804:	4b24      	ldr	r3, [pc, #144]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380a:	4a23      	ldr	r2, [pc, #140]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003810:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003814:	4b20      	ldr	r3, [pc, #128]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800381c:	4a1e      	ldr	r2, [pc, #120]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800381e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003822:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003824:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2232      	movs	r2, #50	@ 0x32
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	4a1c      	ldr	r2, [pc, #112]	@ (80038a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	0c9b      	lsrs	r3, r3, #18
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800383a:	e002      	b.n	8003842 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3b01      	subs	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384e:	d102      	bne.n	8003856 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f2      	bne.n	800383c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003856:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003862:	d112      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e011      	b.n	800388c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003868:	4b0b      	ldr	r3, [pc, #44]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003878:	e007      	b.n	800388a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003882:	4a05      	ldr	r2, [pc, #20]	@ (8003898 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003888:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40007000 	.word	0x40007000
 800389c:	20000000 	.word	0x20000000
 80038a0:	431bde83 	.word	0x431bde83

080038a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80038ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b2:	6093      	str	r3, [r2, #8]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40007000 	.word	0x40007000

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e2fe      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038e2:	4b97      	ldr	r3, [pc, #604]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038ec:	4b94      	ldr	r3, [pc, #592]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_OscConfig+0x3e>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d002      	beq.n	8003908 <HAL_RCC_OscConfig+0x44>
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b8d      	ldr	r3, [pc, #564]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05b      	beq.n	80039cc <HAL_RCC_OscConfig+0x108>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d157      	bne.n	80039cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e2d9      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x74>
 800392a:	4b85      	ldr	r3, [pc, #532]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a84      	ldr	r2, [pc, #528]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b7f      	ldr	r3, [pc, #508]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7e      	ldr	r2, [pc, #504]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7b      	ldr	r2, [pc, #492]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 800395c:	4b78      	ldr	r3, [pc, #480]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a77      	ldr	r2, [pc, #476]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b75      	ldr	r3, [pc, #468]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a74      	ldr	r2, [pc, #464]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fd fc10 	bl	80011a0 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fd fc0c 	bl	80011a0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	@ 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e29e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003996:	4b6a      	ldr	r3, [pc, #424]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xc0>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7fd fbfc 	bl	80011a0 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fd fbf8 	bl	80011a0 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	@ 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e28a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039be:	4b60      	ldr	r3, [pc, #384]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0xe8>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d075      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039da:	4b59      	ldr	r3, [pc, #356]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e4:	4b56      	ldr	r3, [pc, #344]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_OscConfig+0x136>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d002      	beq.n	8003a00 <HAL_RCC_OscConfig+0x13c>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11f      	bne.n	8003a40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a00:	4b4f      	ldr	r3, [pc, #316]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_OscConfig+0x154>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e25d      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a18:	4b49      	ldr	r3, [pc, #292]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	4946      	ldr	r1, [pc, #280]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a2c:	4b45      	ldr	r3, [pc, #276]	@ (8003b44 <HAL_RCC_OscConfig+0x280>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd fb69 	bl	8001108 <HAL_InitTick>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d043      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e249      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d023      	beq.n	8003a90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a48:	4b3d      	ldr	r3, [pc, #244]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fba4 	bl	80011a0 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5c:	f7fd fba0 	bl	80011a0 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e232      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6e:	4b34      	ldr	r3, [pc, #208]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b31      	ldr	r3, [pc, #196]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	492d      	ldr	r1, [pc, #180]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
 8003a8e:	e01a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a90:	4b2b      	ldr	r3, [pc, #172]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2a      	ldr	r2, [pc, #168]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003a96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fd fb80 	bl	80011a0 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fd fb7c 	bl	80011a0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e20e      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab6:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x1e0>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d041      	beq.n	8003b56 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ada:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae0:	4a17      	ldr	r2, [pc, #92]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd fb59 	bl	80011a0 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fd fb55 	bl	80011a0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e1e7      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b04:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ef      	beq.n	8003af2 <HAL_RCC_OscConfig+0x22e>
 8003b12:	e020      	b.n	8003b56 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b0a      	ldr	r3, [pc, #40]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1a:	4a09      	ldr	r2, [pc, #36]	@ (8003b40 <HAL_RCC_OscConfig+0x27c>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fd fb3c 	bl	80011a0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b2a:	e00d      	b.n	8003b48 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fd fb38 	bl	80011a0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d906      	bls.n	8003b48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e1ca      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b48:	4b8c      	ldr	r3, [pc, #560]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ea      	bne.n	8003b2c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 80a6 	beq.w	8003cb0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b68:	4b84      	ldr	r3, [pc, #528]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2b4>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x2b6>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	4a7e      	ldr	r2, [pc, #504]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b96:	2301      	movs	r3, #1
 8003b98:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9a:	4b79      	ldr	r3, [pc, #484]	@ (8003d80 <HAL_RCC_OscConfig+0x4bc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d118      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba6:	4b76      	ldr	r3, [pc, #472]	@ (8003d80 <HAL_RCC_OscConfig+0x4bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a75      	ldr	r2, [pc, #468]	@ (8003d80 <HAL_RCC_OscConfig+0x4bc>)
 8003bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb2:	f7fd faf5 	bl	80011a0 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bba:	f7fd faf1 	bl	80011a0 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e183      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bcc:	4b6c      	ldr	r3, [pc, #432]	@ (8003d80 <HAL_RCC_OscConfig+0x4bc>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d108      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x32e>
 8003be0:	4b66      	ldr	r3, [pc, #408]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	4a65      	ldr	r2, [pc, #404]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf0:	e024      	b.n	8003c3c <HAL_RCC_OscConfig+0x378>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d110      	bne.n	8003c1c <HAL_RCC_OscConfig+0x358>
 8003bfa:	4b60      	ldr	r3, [pc, #384]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	4a5e      	ldr	r2, [pc, #376]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c10:	4a5a      	ldr	r2, [pc, #360]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c1a:	e00f      	b.n	8003c3c <HAL_RCC_OscConfig+0x378>
 8003c1c:	4b57      	ldr	r3, [pc, #348]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	4a56      	ldr	r2, [pc, #344]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c2c:	4b53      	ldr	r3, [pc, #332]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c32:	4a52      	ldr	r2, [pc, #328]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d016      	beq.n	8003c72 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fd faac 	bl	80011a0 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fd faa8 	bl	80011a0 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e138      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c62:	4b46      	ldr	r3, [pc, #280]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ed      	beq.n	8003c4c <HAL_RCC_OscConfig+0x388>
 8003c70:	e015      	b.n	8003c9e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c72:	f7fd fa95 	bl	80011a0 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd fa91 	bl	80011a0 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e121      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c90:	4b3a      	ldr	r3, [pc, #232]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1ed      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c9e:	7ffb      	ldrb	r3, [r7, #31]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d105      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca4:	4b35      	ldr	r3, [pc, #212]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	4a34      	ldr	r2, [pc, #208]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d03c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cca:	4a2c      	ldr	r2, [pc, #176]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fa64 	bl	80011a0 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cdc:	f7fd fa60 	bl	80011a0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0f2      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cee:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCC_OscConfig+0x418>
 8003cfc:	e01b      	b.n	8003d36 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d04:	4a1d      	ldr	r2, [pc, #116]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fa47 	bl	80011a0 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d16:	f7fd fa43 	bl	80011a0 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0d5      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d28:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ef      	bne.n	8003d16 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 80c9 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d40:	4b0e      	ldr	r3, [pc, #56]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b0c      	cmp	r3, #12
 8003d4a:	f000 8083 	beq.w	8003e54 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d15e      	bne.n	8003e14 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b09      	ldr	r3, [pc, #36]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a08      	ldr	r2, [pc, #32]	@ (8003d7c <HAL_RCC_OscConfig+0x4b8>)
 8003d5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d62:	f7fd fa1d 	bl	80011a0 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d68:	e00c      	b.n	8003d84 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd fa19 	bl	80011a0 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d905      	bls.n	8003d84 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e0ab      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d84:	4b55      	ldr	r3, [pc, #340]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ec      	bne.n	8003d6a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d90:	4b52      	ldr	r3, [pc, #328]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	4b52      	ldr	r3, [pc, #328]	@ (8003ee0 <HAL_RCC_OscConfig+0x61c>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6a11      	ldr	r1, [r2, #32]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003da0:	3a01      	subs	r2, #1
 8003da2:	0112      	lsls	r2, r2, #4
 8003da4:	4311      	orrs	r1, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003daa:	0212      	lsls	r2, r2, #8
 8003dac:	4311      	orrs	r1, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003db2:	0852      	lsrs	r2, r2, #1
 8003db4:	3a01      	subs	r2, #1
 8003db6:	0552      	lsls	r2, r2, #21
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003dbe:	0852      	lsrs	r2, r2, #1
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	0652      	lsls	r2, r2, #25
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003dca:	06d2      	lsls	r2, r2, #27
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	4943      	ldr	r1, [pc, #268]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a40      	ldr	r2, [pc, #256]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003dda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de0:	4b3e      	ldr	r3, [pc, #248]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a3d      	ldr	r2, [pc, #244]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd f9d8 	bl	80011a0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df4:	f7fd f9d4 	bl	80011a0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e066      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e06:	4b35      	ldr	r3, [pc, #212]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x530>
 8003e12:	e05e      	b.n	8003ed2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e14:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a30      	ldr	r2, [pc, #192]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fd f9be 	bl	80011a0 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fd f9ba 	bl	80011a0 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e04c      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3a:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f0      	bne.n	8003e28 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e46:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	4924      	ldr	r1, [pc, #144]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003e4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ee4 <HAL_RCC_OscConfig+0x620>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60cb      	str	r3, [r1, #12]
 8003e52:	e03e      	b.n	8003ed2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e039      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e60:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_RCC_OscConfig+0x618>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0203 	and.w	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d12c      	bne.n	8003ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d123      	bne.n	8003ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d11b      	bne.n	8003ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d113      	bne.n	8003ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d109      	bne.n	8003ece <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	019f800c 	.word	0x019f800c
 8003ee4:	feeefffc 	.word	0xfeeefffc

08003ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e11e      	b.n	800413e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f00:	4b91      	ldr	r3, [pc, #580]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d910      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 020f 	bic.w	r2, r3, #15
 8003f16:	498c      	ldr	r1, [pc, #560]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e106      	b.n	800413e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d073      	beq.n	8004024 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d129      	bne.n	8003f98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f44:	4b81      	ldr	r3, [pc, #516]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0f4      	b.n	800413e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f54:	f000 f99e 	bl	8004294 <RCC_GetSysClockFreqFromPLLSource>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4a7c      	ldr	r2, [pc, #496]	@ (8004150 <HAL_RCC_ClockConfig+0x268>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d93f      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f62:	4b7a      	ldr	r3, [pc, #488]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d033      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d12f      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f82:	4b72      	ldr	r3, [pc, #456]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f8a:	4a70      	ldr	r2, [pc, #448]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f92:	2380      	movs	r3, #128	@ 0x80
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	e024      	b.n	8003fe2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e0c6      	b.n	800413e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb0:	4b66      	ldr	r3, [pc, #408]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e0be      	b.n	800413e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fc0:	f000 f8ce 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4a61      	ldr	r2, [pc, #388]	@ (8004150 <HAL_RCC_ClockConfig+0x268>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d909      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fce:	4b5f      	ldr	r3, [pc, #380]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fd6:	4a5d      	ldr	r2, [pc, #372]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fdc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003fde:	2380      	movs	r3, #128	@ 0x80
 8003fe0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f023 0203 	bic.w	r2, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4957      	ldr	r1, [pc, #348]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd f8d4 	bl	80011a0 <HAL_GetTick>
 8003ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ffc:	f7fd f8d0 	bl	80011a0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e095      	b.n	800413e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	4b4e      	ldr	r3, [pc, #312]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 020c 	and.w	r2, r3, #12
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	429a      	cmp	r2, r3
 8004022:	d1eb      	bne.n	8003ffc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d023      	beq.n	8004078 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800403c:	4b43      	ldr	r3, [pc, #268]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	4a42      	ldr	r2, [pc, #264]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004042:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004046:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004054:	4b3d      	ldr	r3, [pc, #244]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800405c:	4a3b      	ldr	r2, [pc, #236]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 800405e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004062:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b39      	ldr	r3, [pc, #228]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4936      	ldr	r1, [pc, #216]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
 8004076:	e008      	b.n	800408a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b80      	cmp	r3, #128	@ 0x80
 800407c:	d105      	bne.n	800408a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800407e:	4b33      	ldr	r3, [pc, #204]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	4a32      	ldr	r2, [pc, #200]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004084:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004088:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800408a:	4b2f      	ldr	r3, [pc, #188]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d21d      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004098:	4b2b      	ldr	r3, [pc, #172]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 020f 	bic.w	r2, r3, #15
 80040a0:	4929      	ldr	r1, [pc, #164]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040a8:	f7fd f87a 	bl	80011a0 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fd f876 	bl	80011a0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e03b      	b.n	800413e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <HAL_RCC_ClockConfig+0x260>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1ed      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e0:	4b1a      	ldr	r3, [pc, #104]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4917      	ldr	r1, [pc, #92]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fe:	4b13      	ldr	r3, [pc, #76]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	490f      	ldr	r1, [pc, #60]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004112:	f000 f825 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 8004116:	4602      	mov	r2, r0
 8004118:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <HAL_RCC_ClockConfig+0x264>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	490c      	ldr	r1, [pc, #48]	@ (8004154 <HAL_RCC_ClockConfig+0x26c>)
 8004124:	5ccb      	ldrb	r3, [r1, r3]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	fa22 f303 	lsr.w	r3, r2, r3
 800412e:	4a0a      	ldr	r2, [pc, #40]	@ (8004158 <HAL_RCC_ClockConfig+0x270>)
 8004130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004132:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <HAL_RCC_ClockConfig+0x274>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fc ffe6 	bl	8001108 <HAL_InitTick>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40022000 	.word	0x40022000
 800414c:	40021000 	.word	0x40021000
 8004150:	04c4b400 	.word	0x04c4b400
 8004154:	08005ee8 	.word	0x08005ee8
 8004158:	20000000 	.word	0x20000000
 800415c:	2000000c 	.word	0x2000000c

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004166:	4b2c      	ldr	r3, [pc, #176]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d102      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004172:	4b2a      	ldr	r3, [pc, #168]	@ (800421c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e047      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004178:	4b27      	ldr	r3, [pc, #156]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d102      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004184:	4b26      	ldr	r3, [pc, #152]	@ (8004220 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	e03e      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800418a:	4b23      	ldr	r3, [pc, #140]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b0c      	cmp	r3, #12
 8004194:	d136      	bne.n	8004204 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004196:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	3301      	adds	r3, #1
 80041ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d10c      	bne.n	80041ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004220 <HAL_RCC_GetSysClockFreq+0xc0>)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	4a16      	ldr	r2, [pc, #88]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041be:	68d2      	ldr	r2, [r2, #12]
 80041c0:	0a12      	lsrs	r2, r2, #8
 80041c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041c6:	fb02 f303 	mul.w	r3, r2, r3
 80041ca:	617b      	str	r3, [r7, #20]
      break;
 80041cc:	e00c      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ce:	4a13      	ldr	r2, [pc, #76]	@ (800421c <HAL_RCC_GetSysClockFreq+0xbc>)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d6:	4a10      	ldr	r2, [pc, #64]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d8:	68d2      	ldr	r2, [r2, #12]
 80041da:	0a12      	lsrs	r2, r2, #8
 80041dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
      break;
 80041e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	0e5b      	lsrs	r3, r3, #25
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	3301      	adds	r3, #1
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	e001      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004208:	693b      	ldr	r3, [r7, #16]
}
 800420a:	4618      	mov	r0, r3
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	00f42400 	.word	0x00f42400
 8004220:	007a1200 	.word	0x007a1200

08004224 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004228:	4b03      	ldr	r3, [pc, #12]	@ (8004238 <HAL_RCC_GetHCLKFreq+0x14>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000000 	.word	0x20000000

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004240:	f7ff fff0 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4904      	ldr	r1, [pc, #16]	@ (8004264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40021000 	.word	0x40021000
 8004264:	08005ef8 	.word	0x08005ef8

08004268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800426c:	f7ff ffda 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0adb      	lsrs	r3, r3, #11
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4904      	ldr	r1, [pc, #16]	@ (8004290 <HAL_RCC_GetPCLK2Freq+0x28>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021000 	.word	0x40021000
 8004290:	08005ef8 	.word	0x08005ef8

08004294 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800429a:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	3301      	adds	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d10c      	bne.n	80042d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b8:	4a17      	ldr	r2, [pc, #92]	@ (8004318 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042c2:	68d2      	ldr	r2, [r2, #12]
 80042c4:	0a12      	lsrs	r2, r2, #8
 80042c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	617b      	str	r3, [r7, #20]
    break;
 80042d0:	e00c      	b.n	80042ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042d2:	4a12      	ldr	r2, [pc, #72]	@ (800431c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	4a0e      	ldr	r2, [pc, #56]	@ (8004314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042dc:	68d2      	ldr	r2, [r2, #12]
 80042de:	0a12      	lsrs	r2, r2, #8
 80042e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042e4:	fb02 f303 	mul.w	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]
    break;
 80042ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042ec:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	0e5b      	lsrs	r3, r3, #25
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	3301      	adds	r3, #1
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004306:	687b      	ldr	r3, [r7, #4]
}
 8004308:	4618      	mov	r0, r3
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40021000 	.word	0x40021000
 8004318:	007a1200 	.word	0x007a1200
 800431c:	00f42400 	.word	0x00f42400

08004320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004328:	2300      	movs	r3, #0
 800432a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800432c:	2300      	movs	r3, #0
 800432e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8098 	beq.w	800446e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004342:	4b43      	ldr	r3, [pc, #268]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	4b40      	ldr	r3, [pc, #256]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	4a3f      	ldr	r2, [pc, #252]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004358:	6593      	str	r3, [r2, #88]	@ 0x58
 800435a:	4b3d      	ldr	r3, [pc, #244]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004366:	2301      	movs	r3, #1
 8004368:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800436a:	4b3a      	ldr	r3, [pc, #232]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a39      	ldr	r2, [pc, #228]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004374:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004376:	f7fc ff13 	bl	80011a0 <HAL_GetTick>
 800437a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800437c:	e009      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437e:	f7fc ff0f 	bl	80011a0 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d902      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	74fb      	strb	r3, [r7, #19]
        break;
 8004390:	e005      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004392:	4b30      	ldr	r3, [pc, #192]	@ (8004454 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0ef      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800439e:	7cfb      	ldrb	r3, [r7, #19]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d159      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01e      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d019      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043c0:	4b23      	ldr	r3, [pc, #140]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043cc:	4b20      	ldr	r3, [pc, #128]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043ec:	4a18      	ldr	r2, [pc, #96]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fc fecf 	bl	80011a0 <HAL_GetTick>
 8004402:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004404:	e00b      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fc fecb 	bl	80011a0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d902      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	74fb      	strb	r3, [r7, #19]
            break;
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800441e:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ec      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004432:	4b07      	ldr	r3, [pc, #28]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004438:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	4903      	ldr	r1, [pc, #12]	@ (8004450 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004448:	e008      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	74bb      	strb	r3, [r7, #18]
 800444e:	e005      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7cfb      	ldrb	r3, [r7, #19]
 800445a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800445c:	7c7b      	ldrb	r3, [r7, #17]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d105      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004462:	4ba6      	ldr	r3, [pc, #664]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004466:	4aa5      	ldr	r2, [pc, #660]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800446c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800447a:	4ba0      	ldr	r3, [pc, #640]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004480:	f023 0203 	bic.w	r2, r3, #3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	499c      	ldr	r1, [pc, #624]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800449c:	4b97      	ldr	r3, [pc, #604]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	f023 020c 	bic.w	r2, r3, #12
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	4994      	ldr	r1, [pc, #592]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044be:	4b8f      	ldr	r3, [pc, #572]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	498b      	ldr	r1, [pc, #556]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044e0:	4b86      	ldr	r3, [pc, #536]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	4983      	ldr	r1, [pc, #524]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004502:	4b7e      	ldr	r3, [pc, #504]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	497a      	ldr	r1, [pc, #488]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004524:	4b75      	ldr	r3, [pc, #468]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	4972      	ldr	r1, [pc, #456]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004546:	4b6d      	ldr	r3, [pc, #436]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	4969      	ldr	r1, [pc, #420]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004568:	4b64      	ldr	r3, [pc, #400]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4961      	ldr	r1, [pc, #388]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800458a:	4b5c      	ldr	r3, [pc, #368]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800458c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004590:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	4958      	ldr	r1, [pc, #352]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459a:	4313      	orrs	r3, r2
 800459c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d015      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ac:	4b53      	ldr	r3, [pc, #332]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	4950      	ldr	r1, [pc, #320]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045cc:	4b4b      	ldr	r3, [pc, #300]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a4a      	ldr	r2, [pc, #296]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045d6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045e4:	4b45      	ldr	r3, [pc, #276]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	4942      	ldr	r1, [pc, #264]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004602:	d105      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	4b3d      	ldr	r3, [pc, #244]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a3c      	ldr	r2, [pc, #240]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800460a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800460e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d015      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800461c:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004622:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	4934      	ldr	r1, [pc, #208]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800463a:	d105      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463c:	4b2f      	ldr	r3, [pc, #188]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a2e      	ldr	r2, [pc, #184]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004646:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d015      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004654:	4b29      	ldr	r3, [pc, #164]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	4926      	ldr	r1, [pc, #152]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800466e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004674:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a20      	ldr	r2, [pc, #128]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800467a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800467e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d015      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800468c:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004692:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	4918      	ldr	r1, [pc, #96]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046aa:	d105      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046ac:	4b13      	ldr	r3, [pc, #76]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046c4:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d2:	490a      	ldr	r1, [pc, #40]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a04      	ldr	r2, [pc, #16]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80046ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80046f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000

08004700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e09d      	b.n	800484e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d108      	bne.n	800472c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004722:	d009      	beq.n	8004738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
 800472a:	e005      	b.n	8004738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fa9a 	bl	8000c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800476e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004778:	d902      	bls.n	8004780 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e002      	b.n	8004786 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004784:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800478e:	d007      	beq.n	80047a0 <HAL_SPI_Init+0xa0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004798:	d002      	beq.n	80047a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047d8:	431a      	orrs	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e2:	ea42 0103 	orr.w	r1, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	0c1b      	lsrs	r3, r3, #16
 80047fc:	f003 0204 	and.w	r2, r3, #4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800483c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e049      	b.n	80048fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fc fa47 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f000 fab1 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0202 	mvn.w	r2, #2
 8004938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa36 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa28 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa39 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d020      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01b      	beq.n	80049b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0204 	mvn.w	r2, #4
 8004984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fa10 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 80049a0:	e005      	b.n	80049ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fa02 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fa13 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d020      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0208 	mvn.w	r2, #8
 80049d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2204      	movs	r2, #4
 80049d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f9ea 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 80049ec:	e005      	b.n	80049fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9dc 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f9ed 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d020      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0210 	mvn.w	r2, #16
 8004a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2208      	movs	r2, #8
 8004a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f9c4 	bl	8004dc0 <HAL_TIM_IC_CaptureCallback>
 8004a38:	e005      	b.n	8004a46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f9b6 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f9c7 	bl	8004dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00c      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0201 	mvn.w	r2, #1
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f994 	bl	8004d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00c      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb73 	bl	8005184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 fb6b 	bl	8005198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f981 	bl	8004de8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0220 	mvn.w	r2, #32
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb33 	bl	8005170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fb3f 	bl	80051ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00c      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d007      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fb37 	bl	80051c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00c      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fb2f 	bl	80051d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb27 	bl	80051e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e0de      	b.n	8004d7e <HAL_TIM_ConfigClockSource+0x1da>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004bde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a63      	ldr	r2, [pc, #396]	@ (8004d88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	f000 80a9 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c00:	4a61      	ldr	r2, [pc, #388]	@ (8004d88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	f200 80ae 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c08:	4a60      	ldr	r2, [pc, #384]	@ (8004d8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	f000 80a1 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c10:	4a5e      	ldr	r2, [pc, #376]	@ (8004d8c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f200 80a6 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c18:	4a5d      	ldr	r2, [pc, #372]	@ (8004d90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	f000 8099 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c20:	4a5b      	ldr	r2, [pc, #364]	@ (8004d90 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f200 809e 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c28:	4a5a      	ldr	r2, [pc, #360]	@ (8004d94 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f000 8091 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c30:	4a58      	ldr	r2, [pc, #352]	@ (8004d94 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	f200 8096 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c38:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c3c:	f000 8089 	beq.w	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c44:	f200 808e 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4c:	d03e      	beq.n	8004ccc <HAL_TIM_ConfigClockSource+0x128>
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c52:	f200 8087 	bhi.w	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5a:	f000 8086 	beq.w	8004d6a <HAL_TIM_ConfigClockSource+0x1c6>
 8004c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c62:	d87f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c64:	2b70      	cmp	r3, #112	@ 0x70
 8004c66:	d01a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0xfa>
 8004c68:	2b70      	cmp	r3, #112	@ 0x70
 8004c6a:	d87b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c6c:	2b60      	cmp	r3, #96	@ 0x60
 8004c6e:	d050      	beq.n	8004d12 <HAL_TIM_ConfigClockSource+0x16e>
 8004c70:	2b60      	cmp	r3, #96	@ 0x60
 8004c72:	d877      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c74:	2b50      	cmp	r3, #80	@ 0x50
 8004c76:	d03c      	beq.n	8004cf2 <HAL_TIM_ConfigClockSource+0x14e>
 8004c78:	2b50      	cmp	r3, #80	@ 0x50
 8004c7a:	d873      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d058      	beq.n	8004d32 <HAL_TIM_ConfigClockSource+0x18e>
 8004c80:	2b40      	cmp	r3, #64	@ 0x40
 8004c82:	d86f      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c84:	2b30      	cmp	r3, #48	@ 0x30
 8004c86:	d064      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c88:	2b30      	cmp	r3, #48	@ 0x30
 8004c8a:	d86b      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d060      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d867      	bhi.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d05c      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d05a      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c9c:	e062      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cae:	f000 f9bd 	bl	800502c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	609a      	str	r2, [r3, #8]
      break;
 8004cca:	e04f      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cdc:	f000 f9a6 	bl	800502c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cee:	609a      	str	r2, [r3, #8]
      break;
 8004cf0:	e03c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f000 f918 	bl	8004f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2150      	movs	r1, #80	@ 0x50
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f971 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d10:	e02c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f000 f937 	bl	8004f92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2160      	movs	r1, #96	@ 0x60
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f961 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d30:	e01c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f000 f8f8 	bl	8004f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2140      	movs	r1, #64	@ 0x40
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f951 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f000 f948 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004d62:	e003      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e000      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	00100070 	.word	0x00100070
 8004d8c:	00100040 	.word	0x00100040
 8004d90:	00100030 	.word	0x00100030
 8004d94:	00100020 	.word	0x00100020

08004d98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a42      	ldr	r2, [pc, #264]	@ (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d00f      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1a:	d00b      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d007      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3e      	ldr	r2, [pc, #248]	@ (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d003      	beq.n	8004e34 <TIM_Base_SetConfig+0x38>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d108      	bne.n	8004e46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a33      	ldr	r2, [pc, #204]	@ (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01b      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e54:	d017      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a30      	ldr	r2, [pc, #192]	@ (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2f      	ldr	r2, [pc, #188]	@ (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00f      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	@ (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2c      	ldr	r2, [pc, #176]	@ (8004f2c <TIM_Base_SetConfig+0x130>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0x8a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2b      	ldr	r2, [pc, #172]	@ (8004f30 <TIM_Base_SetConfig+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a16      	ldr	r2, [pc, #88]	@ (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00f      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	@ (8004f24 <TIM_Base_SetConfig+0x128>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a16      	ldr	r2, [pc, #88]	@ (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <TIM_Base_SetConfig+0x130>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0xe8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a14      	ldr	r2, [pc, #80]	@ (8004f30 <TIM_Base_SetConfig+0x134>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d103      	bne.n	8004eec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d105      	bne.n	8004f0a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	611a      	str	r2, [r3, #16]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40012c00 	.word	0x40012c00
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40013400 	.word	0x40013400
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800

08004f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f023 0201 	bic.w	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 030a 	bic.w	r3, r3, #10
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f023 0210 	bic.w	r2, r3, #16
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	031b      	lsls	r3, r3, #12
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005008:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	f043 0307 	orr.w	r3, r3, #7
 8005018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800502c:	b480      	push	{r7}
 800502e:	b087      	sub	sp, #28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	431a      	orrs	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4313      	orrs	r3, r2
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	609a      	str	r2, [r3, #8]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e065      	b.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2c      	ldr	r2, [pc, #176]	@ (800515c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d108      	bne.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80050be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80050d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d018      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fa:	d013      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a17      	ldr	r2, [pc, #92]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a12      	ldr	r2, [pc, #72]	@ (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a13      	ldr	r2, [pc, #76]	@ (800516c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10c      	bne.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800512a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40014000 	.word	0x40014000

08005170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e042      	b.n	8005294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fb fd9b 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2224      	movs	r2, #36	@ 0x24
 800522a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 faf4 	bl	8005834 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f825 	bl	800529c <UART_SetConfig>
 8005252:	4603      	mov	r3, r0
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e01b      	b.n	8005294 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800526a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800527a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fb73 	bl	8005978 <UART_CheckIdleState>
 8005292:	4603      	mov	r3, r0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b08c      	sub	sp, #48	@ 0x30
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4bab      	ldr	r3, [pc, #684]	@ (8005578 <UART_SetConfig+0x2dc>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4aa0      	ldr	r2, [pc, #640]	@ (800557c <UART_SetConfig+0x2e0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005304:	4313      	orrs	r3, r2
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005312:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800531c:	430b      	orrs	r3, r1
 800531e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005326:	f023 010f 	bic.w	r1, r3, #15
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a91      	ldr	r2, [pc, #580]	@ (8005580 <UART_SetConfig+0x2e4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d125      	bne.n	800538c <UART_SetConfig+0xf0>
 8005340:	4b90      	ldr	r3, [pc, #576]	@ (8005584 <UART_SetConfig+0x2e8>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b03      	cmp	r3, #3
 800534c:	d81a      	bhi.n	8005384 <UART_SetConfig+0xe8>
 800534e:	a201      	add	r2, pc, #4	@ (adr r2, 8005354 <UART_SetConfig+0xb8>)
 8005350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005354:	08005365 	.word	0x08005365
 8005358:	08005375 	.word	0x08005375
 800535c:	0800536d 	.word	0x0800536d
 8005360:	0800537d 	.word	0x0800537d
 8005364:	2301      	movs	r3, #1
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e0d6      	b.n	800551a <UART_SetConfig+0x27e>
 800536c:	2302      	movs	r3, #2
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e0d2      	b.n	800551a <UART_SetConfig+0x27e>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e0ce      	b.n	800551a <UART_SetConfig+0x27e>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e0ca      	b.n	800551a <UART_SetConfig+0x27e>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e0c6      	b.n	800551a <UART_SetConfig+0x27e>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a7d      	ldr	r2, [pc, #500]	@ (8005588 <UART_SetConfig+0x2ec>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d138      	bne.n	8005408 <UART_SetConfig+0x16c>
 8005396:	4b7b      	ldr	r3, [pc, #492]	@ (8005584 <UART_SetConfig+0x2e8>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b0c      	cmp	r3, #12
 80053a2:	d82d      	bhi.n	8005400 <UART_SetConfig+0x164>
 80053a4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0x110>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053e1 	.word	0x080053e1
 80053b0:	08005401 	.word	0x08005401
 80053b4:	08005401 	.word	0x08005401
 80053b8:	08005401 	.word	0x08005401
 80053bc:	080053f1 	.word	0x080053f1
 80053c0:	08005401 	.word	0x08005401
 80053c4:	08005401 	.word	0x08005401
 80053c8:	08005401 	.word	0x08005401
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	08005401 	.word	0x08005401
 80053d4:	08005401 	.word	0x08005401
 80053d8:	08005401 	.word	0x08005401
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e098      	b.n	800551a <UART_SetConfig+0x27e>
 80053e8:	2302      	movs	r3, #2
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ee:	e094      	b.n	800551a <UART_SetConfig+0x27e>
 80053f0:	2304      	movs	r3, #4
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f6:	e090      	b.n	800551a <UART_SetConfig+0x27e>
 80053f8:	2308      	movs	r3, #8
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fe:	e08c      	b.n	800551a <UART_SetConfig+0x27e>
 8005400:	2310      	movs	r3, #16
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005406:	e088      	b.n	800551a <UART_SetConfig+0x27e>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5f      	ldr	r2, [pc, #380]	@ (800558c <UART_SetConfig+0x2f0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d125      	bne.n	800545e <UART_SetConfig+0x1c2>
 8005412:	4b5c      	ldr	r3, [pc, #368]	@ (8005584 <UART_SetConfig+0x2e8>)
 8005414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005418:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800541c:	2b30      	cmp	r3, #48	@ 0x30
 800541e:	d016      	beq.n	800544e <UART_SetConfig+0x1b2>
 8005420:	2b30      	cmp	r3, #48	@ 0x30
 8005422:	d818      	bhi.n	8005456 <UART_SetConfig+0x1ba>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d00a      	beq.n	800543e <UART_SetConfig+0x1a2>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d814      	bhi.n	8005456 <UART_SetConfig+0x1ba>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <UART_SetConfig+0x19a>
 8005430:	2b10      	cmp	r3, #16
 8005432:	d008      	beq.n	8005446 <UART_SetConfig+0x1aa>
 8005434:	e00f      	b.n	8005456 <UART_SetConfig+0x1ba>
 8005436:	2300      	movs	r3, #0
 8005438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543c:	e06d      	b.n	800551a <UART_SetConfig+0x27e>
 800543e:	2302      	movs	r3, #2
 8005440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005444:	e069      	b.n	800551a <UART_SetConfig+0x27e>
 8005446:	2304      	movs	r3, #4
 8005448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544c:	e065      	b.n	800551a <UART_SetConfig+0x27e>
 800544e:	2308      	movs	r3, #8
 8005450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005454:	e061      	b.n	800551a <UART_SetConfig+0x27e>
 8005456:	2310      	movs	r3, #16
 8005458:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545c:	e05d      	b.n	800551a <UART_SetConfig+0x27e>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a4b      	ldr	r2, [pc, #300]	@ (8005590 <UART_SetConfig+0x2f4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d125      	bne.n	80054b4 <UART_SetConfig+0x218>
 8005468:	4b46      	ldr	r3, [pc, #280]	@ (8005584 <UART_SetConfig+0x2e8>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005472:	2bc0      	cmp	r3, #192	@ 0xc0
 8005474:	d016      	beq.n	80054a4 <UART_SetConfig+0x208>
 8005476:	2bc0      	cmp	r3, #192	@ 0xc0
 8005478:	d818      	bhi.n	80054ac <UART_SetConfig+0x210>
 800547a:	2b80      	cmp	r3, #128	@ 0x80
 800547c:	d00a      	beq.n	8005494 <UART_SetConfig+0x1f8>
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d814      	bhi.n	80054ac <UART_SetConfig+0x210>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <UART_SetConfig+0x1f0>
 8005486:	2b40      	cmp	r3, #64	@ 0x40
 8005488:	d008      	beq.n	800549c <UART_SetConfig+0x200>
 800548a:	e00f      	b.n	80054ac <UART_SetConfig+0x210>
 800548c:	2300      	movs	r3, #0
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005492:	e042      	b.n	800551a <UART_SetConfig+0x27e>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549a:	e03e      	b.n	800551a <UART_SetConfig+0x27e>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a2:	e03a      	b.n	800551a <UART_SetConfig+0x27e>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e036      	b.n	800551a <UART_SetConfig+0x27e>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e032      	b.n	800551a <UART_SetConfig+0x27e>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a30      	ldr	r2, [pc, #192]	@ (800557c <UART_SetConfig+0x2e0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d12a      	bne.n	8005514 <UART_SetConfig+0x278>
 80054be:	4b31      	ldr	r3, [pc, #196]	@ (8005584 <UART_SetConfig+0x2e8>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80054c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054cc:	d01a      	beq.n	8005504 <UART_SetConfig+0x268>
 80054ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054d2:	d81b      	bhi.n	800550c <UART_SetConfig+0x270>
 80054d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d8:	d00c      	beq.n	80054f4 <UART_SetConfig+0x258>
 80054da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054de:	d815      	bhi.n	800550c <UART_SetConfig+0x270>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <UART_SetConfig+0x250>
 80054e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054e8:	d008      	beq.n	80054fc <UART_SetConfig+0x260>
 80054ea:	e00f      	b.n	800550c <UART_SetConfig+0x270>
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054f2:	e012      	b.n	800551a <UART_SetConfig+0x27e>
 80054f4:	2302      	movs	r3, #2
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fa:	e00e      	b.n	800551a <UART_SetConfig+0x27e>
 80054fc:	2304      	movs	r3, #4
 80054fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005502:	e00a      	b.n	800551a <UART_SetConfig+0x27e>
 8005504:	2308      	movs	r3, #8
 8005506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800550a:	e006      	b.n	800551a <UART_SetConfig+0x27e>
 800550c:	2310      	movs	r3, #16
 800550e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005512:	e002      	b.n	800551a <UART_SetConfig+0x27e>
 8005514:	2310      	movs	r3, #16
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a17      	ldr	r2, [pc, #92]	@ (800557c <UART_SetConfig+0x2e0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	f040 80a8 	bne.w	8005676 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005526:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800552a:	2b08      	cmp	r3, #8
 800552c:	d834      	bhi.n	8005598 <UART_SetConfig+0x2fc>
 800552e:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <UART_SetConfig+0x298>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005559 	.word	0x08005559
 8005538:	08005599 	.word	0x08005599
 800553c:	08005561 	.word	0x08005561
 8005540:	08005599 	.word	0x08005599
 8005544:	08005567 	.word	0x08005567
 8005548:	08005599 	.word	0x08005599
 800554c:	08005599 	.word	0x08005599
 8005550:	08005599 	.word	0x08005599
 8005554:	0800556f 	.word	0x0800556f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fe fe70 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 800555c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800555e:	e021      	b.n	80055a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005560:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <UART_SetConfig+0x2f8>)
 8005562:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005564:	e01e      	b.n	80055a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005566:	f7fe fdfb 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800556a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800556c:	e01a      	b.n	80055a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005574:	e016      	b.n	80055a4 <UART_SetConfig+0x308>
 8005576:	bf00      	nop
 8005578:	cfff69f3 	.word	0xcfff69f3
 800557c:	40008000 	.word	0x40008000
 8005580:	40013800 	.word	0x40013800
 8005584:	40021000 	.word	0x40021000
 8005588:	40004400 	.word	0x40004400
 800558c:	40004800 	.word	0x40004800
 8005590:	40004c00 	.word	0x40004c00
 8005594:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 812a 	beq.w	8005800 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	4a9e      	ldr	r2, [pc, #632]	@ (800582c <UART_SetConfig+0x590>)
 80055b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80055be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4413      	add	r3, r2
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d305      	bcc.n	80055dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d903      	bls.n	80055e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055e2:	e10d      	b.n	8005800 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	2200      	movs	r2, #0
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	60fa      	str	r2, [r7, #12]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	4a8e      	ldr	r2, [pc, #568]	@ (800582c <UART_SetConfig+0x590>)
 80055f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2200      	movs	r2, #0
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005606:	f7fa fe07 	bl	8000218 <__aeabi_uldivmod>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	020b      	lsls	r3, r1, #8
 800561c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005620:	0202      	lsls	r2, r0, #8
 8005622:	6979      	ldr	r1, [r7, #20]
 8005624:	6849      	ldr	r1, [r1, #4]
 8005626:	0849      	lsrs	r1, r1, #1
 8005628:	2000      	movs	r0, #0
 800562a:	460c      	mov	r4, r1
 800562c:	4605      	mov	r5, r0
 800562e:	eb12 0804 	adds.w	r8, r2, r4
 8005632:	eb43 0905 	adc.w	r9, r3, r5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	469a      	mov	sl, r3
 800563e:	4693      	mov	fp, r2
 8005640:	4652      	mov	r2, sl
 8005642:	465b      	mov	r3, fp
 8005644:	4640      	mov	r0, r8
 8005646:	4649      	mov	r1, r9
 8005648:	f7fa fde6 	bl	8000218 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800565a:	d308      	bcc.n	800566e <UART_SetConfig+0x3d2>
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005662:	d204      	bcs.n	800566e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	e0c8      	b.n	8005800 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005674:	e0c4      	b.n	8005800 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567e:	d167      	bne.n	8005750 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005680:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005684:	2b08      	cmp	r3, #8
 8005686:	d828      	bhi.n	80056da <UART_SetConfig+0x43e>
 8005688:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <UART_SetConfig+0x3f4>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	080056db 	.word	0x080056db
 80056a0:	080056cb 	.word	0x080056cb
 80056a4:	080056db 	.word	0x080056db
 80056a8:	080056db 	.word	0x080056db
 80056ac:	080056db 	.word	0x080056db
 80056b0:	080056d3 	.word	0x080056d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b4:	f7fe fdc2 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 80056b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056ba:	e014      	b.n	80056e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056bc:	f7fe fdd4 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 80056c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056c2:	e010      	b.n	80056e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005830 <UART_SetConfig+0x594>)
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056c8:	e00d      	b.n	80056e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ca:	f7fe fd49 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 80056ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056d0:	e009      	b.n	80056e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056d8:	e005      	b.n	80056e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8089 	beq.w	8005800 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	4a4e      	ldr	r2, [pc, #312]	@ (800582c <UART_SetConfig+0x590>)
 80056f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f8:	461a      	mov	r2, r3
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005700:	005a      	lsls	r2, r3, #1
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	441a      	add	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d916      	bls.n	8005748 <UART_SetConfig+0x4ac>
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d212      	bcs.n	8005748 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f023 030f 	bic.w	r3, r3, #15
 800572a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	b29b      	uxth	r3, r3
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	b29a      	uxth	r2, r3
 8005738:	8bfb      	ldrh	r3, [r7, #30]
 800573a:	4313      	orrs	r3, r2
 800573c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	8bfa      	ldrh	r2, [r7, #30]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	e05b      	b.n	8005800 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800574e:	e057      	b.n	8005800 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005750:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005754:	2b08      	cmp	r3, #8
 8005756:	d828      	bhi.n	80057aa <UART_SetConfig+0x50e>
 8005758:	a201      	add	r2, pc, #4	@ (adr r2, 8005760 <UART_SetConfig+0x4c4>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005785 	.word	0x08005785
 8005764:	0800578d 	.word	0x0800578d
 8005768:	08005795 	.word	0x08005795
 800576c:	080057ab 	.word	0x080057ab
 8005770:	0800579b 	.word	0x0800579b
 8005774:	080057ab 	.word	0x080057ab
 8005778:	080057ab 	.word	0x080057ab
 800577c:	080057ab 	.word	0x080057ab
 8005780:	080057a3 	.word	0x080057a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005784:	f7fe fd5a 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8005788:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800578a:	e014      	b.n	80057b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800578c:	f7fe fd6c 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 8005790:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005792:	e010      	b.n	80057b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005794:	4b26      	ldr	r3, [pc, #152]	@ (8005830 <UART_SetConfig+0x594>)
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005798:	e00d      	b.n	80057b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579a:	f7fe fce1 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800579e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057a0:	e009      	b.n	80057b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057a8:	e005      	b.n	80057b6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80057aa:	2300      	movs	r3, #0
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057b4:	bf00      	nop
    }

    if (pclk != 0U)
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d021      	beq.n	8005800 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <UART_SetConfig+0x590>)
 80057c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c6:	461a      	mov	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	085b      	lsrs	r3, r3, #1
 80057d4:	441a      	add	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	fbb2 f3f3 	udiv	r3, r2, r3
 80057de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	2b0f      	cmp	r3, #15
 80057e4:	d909      	bls.n	80057fa <UART_SetConfig+0x55e>
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ec:	d205      	bcs.n	80057fa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60da      	str	r2, [r3, #12]
 80057f8:	e002      	b.n	8005800 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2201      	movs	r2, #1
 8005804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2201      	movs	r2, #1
 800580c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	2200      	movs	r2, #0
 8005814:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800581c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005820:	4618      	mov	r0, r3
 8005822:	3730      	adds	r7, #48	@ 0x30
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582a:	bf00      	nop
 800582c:	08005f00 	.word	0x08005f00
 8005830:	00f42400 	.word	0x00f42400

08005834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ea:	f003 0320 	and.w	r3, r3, #32
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01a      	beq.n	800594a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005932:	d10a      	bne.n	800594a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	605a      	str	r2, [r3, #4]
  }
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b098      	sub	sp, #96	@ 0x60
 800597c:	af02      	add	r7, sp, #8
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005988:	f7fb fc0a 	bl	80011a0 <HAL_GetTick>
 800598c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b08      	cmp	r3, #8
 800599a:	d12f      	bne.n	80059fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800599c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f88e 	bl	8005acc <UART_WaitOnFlagUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d022      	beq.n	80059fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80059da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e6      	bne.n	80059b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e063      	b.n	8005ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d149      	bne.n	8005a9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a12:	2200      	movs	r2, #0
 8005a14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f857 	bl	8005acc <UART_WaitOnFlagUntilTimeout>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d03c      	beq.n	8005a9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	623b      	str	r3, [r7, #32]
   return(result);
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e6      	bne.n	8005a24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a76:	61fa      	str	r2, [r7, #28]
 8005a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	69b9      	ldr	r1, [r7, #24]
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	617b      	str	r3, [r7, #20]
   return(result);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e5      	bne.n	8005a56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e012      	b.n	8005ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3758      	adds	r7, #88	@ 0x58
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005adc:	e04f      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae4:	d04b      	beq.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae6:	f7fb fb5b 	bl	80011a0 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d302      	bcc.n	8005afc <UART_WaitOnFlagUntilTimeout+0x30>
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e04e      	b.n	8005b9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d037      	beq.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b80      	cmp	r3, #128	@ 0x80
 8005b12:	d034      	beq.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b40      	cmp	r3, #64	@ 0x40
 8005b18:	d031      	beq.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d110      	bne.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f838 	bl	8005ba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2208      	movs	r2, #8
 8005b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e029      	b.n	8005b9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b58:	d111      	bne.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f81e 	bl	8005ba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e00f      	b.n	8005b9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d0a0      	beq.n	8005ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b095      	sub	sp, #84	@ 0x54
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e6      	bne.n	8005bae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e3      	bne.n	8005be0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d118      	bne.n	8005c52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f023 0310 	bic.w	r3, r3, #16
 8005c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6979      	ldr	r1, [r7, #20]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c66:	bf00      	nop
 8005c68:	3754      	adds	r7, #84	@ 0x54
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e027      	b.n	8005cd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2224      	movs	r2, #36	@ 0x24
 8005c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005cb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e02d      	b.n	8005d58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	@ 0x24
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f84f 	bl	8005ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e02d      	b.n	8005dd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2224      	movs	r2, #36	@ 0x24
 8005d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f811 	bl	8005ddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dfc:	e031      	b.n	8005e62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dfe:	2308      	movs	r3, #8
 8005e00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e02:	2308      	movs	r3, #8
 8005e04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	0e5b      	lsrs	r3, r3, #25
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	0f5b      	lsrs	r3, r3, #29
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e26:	7bbb      	ldrb	r3, [r7, #14]
 8005e28:	7b3a      	ldrb	r2, [r7, #12]
 8005e2a:	4911      	ldr	r1, [pc, #68]	@ (8005e70 <UARTEx_SetNbDataToProcess+0x94>)
 8005e2c:	5c8a      	ldrb	r2, [r1, r2]
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e32:	7b3a      	ldrb	r2, [r7, #12]
 8005e34:	490f      	ldr	r1, [pc, #60]	@ (8005e74 <UARTEx_SetNbDataToProcess+0x98>)
 8005e36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e38:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	7b7a      	ldrb	r2, [r7, #13]
 8005e48:	4909      	ldr	r1, [pc, #36]	@ (8005e70 <UARTEx_SetNbDataToProcess+0x94>)
 8005e4a:	5c8a      	ldrb	r2, [r1, r2]
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e50:	7b7a      	ldrb	r2, [r7, #13]
 8005e52:	4908      	ldr	r1, [pc, #32]	@ (8005e74 <UARTEx_SetNbDataToProcess+0x98>)
 8005e54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e56:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	08005f18 	.word	0x08005f18
 8005e74:	08005f20 	.word	0x08005f20

08005e78 <memset>:
 8005e78:	4402      	add	r2, r0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <__libc_init_array>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ec0 <__libc_init_array+0x38>)
 8005e8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ec4 <__libc_init_array+0x3c>)
 8005e8e:	1b64      	subs	r4, r4, r5
 8005e90:	10a4      	asrs	r4, r4, #2
 8005e92:	2600      	movs	r6, #0
 8005e94:	42a6      	cmp	r6, r4
 8005e96:	d109      	bne.n	8005eac <__libc_init_array+0x24>
 8005e98:	4d0b      	ldr	r5, [pc, #44]	@ (8005ec8 <__libc_init_array+0x40>)
 8005e9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005ecc <__libc_init_array+0x44>)
 8005e9c:	f000 f818 	bl	8005ed0 <_init>
 8005ea0:	1b64      	subs	r4, r4, r5
 8005ea2:	10a4      	asrs	r4, r4, #2
 8005ea4:	2600      	movs	r6, #0
 8005ea6:	42a6      	cmp	r6, r4
 8005ea8:	d105      	bne.n	8005eb6 <__libc_init_array+0x2e>
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb0:	4798      	blx	r3
 8005eb2:	3601      	adds	r6, #1
 8005eb4:	e7ee      	b.n	8005e94 <__libc_init_array+0xc>
 8005eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eba:	4798      	blx	r3
 8005ebc:	3601      	adds	r6, #1
 8005ebe:	e7f2      	b.n	8005ea6 <__libc_init_array+0x1e>
 8005ec0:	08005f30 	.word	0x08005f30
 8005ec4:	08005f30 	.word	0x08005f30
 8005ec8:	08005f30 	.word	0x08005f30
 8005ecc:	08005f34 	.word	0x08005f34

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
